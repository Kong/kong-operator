// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sdkmocks

import (
	"context"

	"github.com/Kong/sdk-konnect-go/models/components"
	"github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCertificatesSDK creates a new instance of MockCertificatesSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCertificatesSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCertificatesSDK {
	mock := &MockCertificatesSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCertificatesSDK is an autogenerated mock type for the CertificatesSDK type
type MockCertificatesSDK struct {
	mock.Mock
}

type MockCertificatesSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCertificatesSDK) EXPECT() *MockCertificatesSDK_Expecter {
	return &MockCertificatesSDK_Expecter{mock: &_m.Mock}
}

// CreateCertificate provides a mock function for the type MockCertificatesSDK
func (_mock *MockCertificatesSDK) CreateCertificate(ctx context.Context, controlPlaneID string, certificate components.Certificate, opts ...operations.Option) (*operations.CreateCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, certificate, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, certificate)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateCertificate")
	}

	var r0 *operations.CreateCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Certificate, ...operations.Option) (*operations.CreateCertificateResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, certificate, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Certificate, ...operations.Option) *operations.CreateCertificateResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, certificate, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, components.Certificate, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, certificate, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCertificatesSDK_CreateCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCertificate'
type MockCertificatesSDK_CreateCertificate_Call struct {
	*mock.Call
}

// CreateCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - certificate components.Certificate
//   - opts ...operations.Option
func (_e *MockCertificatesSDK_Expecter) CreateCertificate(ctx interface{}, controlPlaneID interface{}, certificate interface{}, opts ...interface{}) *MockCertificatesSDK_CreateCertificate_Call {
	return &MockCertificatesSDK_CreateCertificate_Call{Call: _e.mock.On("CreateCertificate",
		append([]interface{}{ctx, controlPlaneID, certificate}, opts...)...)}
}

func (_c *MockCertificatesSDK_CreateCertificate_Call) Run(run func(ctx context.Context, controlPlaneID string, certificate components.Certificate, opts ...operations.Option)) *MockCertificatesSDK_CreateCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 components.Certificate
		if args[2] != nil {
			arg2 = args[2].(components.Certificate)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockCertificatesSDK_CreateCertificate_Call) Return(createCertificateResponse *operations.CreateCertificateResponse, err error) *MockCertificatesSDK_CreateCertificate_Call {
	_c.Call.Return(createCertificateResponse, err)
	return _c
}

func (_c *MockCertificatesSDK_CreateCertificate_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, certificate components.Certificate, opts ...operations.Option) (*operations.CreateCertificateResponse, error)) *MockCertificatesSDK_CreateCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCertificate provides a mock function for the type MockCertificatesSDK
func (_mock *MockCertificatesSDK) DeleteCertificate(ctx context.Context, controlPlaneID string, certificateID string, opts ...operations.Option) (*operations.DeleteCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, certificateID, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, certificateID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteCertificate")
	}

	var r0 *operations.DeleteCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeleteCertificateResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, certificateID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteCertificateResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, certificateID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, certificateID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCertificatesSDK_DeleteCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCertificate'
type MockCertificatesSDK_DeleteCertificate_Call struct {
	*mock.Call
}

// DeleteCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - certificateID string
//   - opts ...operations.Option
func (_e *MockCertificatesSDK_Expecter) DeleteCertificate(ctx interface{}, controlPlaneID interface{}, certificateID interface{}, opts ...interface{}) *MockCertificatesSDK_DeleteCertificate_Call {
	return &MockCertificatesSDK_DeleteCertificate_Call{Call: _e.mock.On("DeleteCertificate",
		append([]interface{}{ctx, controlPlaneID, certificateID}, opts...)...)}
}

func (_c *MockCertificatesSDK_DeleteCertificate_Call) Run(run func(ctx context.Context, controlPlaneID string, certificateID string, opts ...operations.Option)) *MockCertificatesSDK_DeleteCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockCertificatesSDK_DeleteCertificate_Call) Return(deleteCertificateResponse *operations.DeleteCertificateResponse, err error) *MockCertificatesSDK_DeleteCertificate_Call {
	_c.Call.Return(deleteCertificateResponse, err)
	return _c
}

func (_c *MockCertificatesSDK_DeleteCertificate_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, certificateID string, opts ...operations.Option) (*operations.DeleteCertificateResponse, error)) *MockCertificatesSDK_DeleteCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// GetCertificate provides a mock function for the type MockCertificatesSDK
func (_mock *MockCertificatesSDK) GetCertificate(ctx context.Context, certificateID string, controlPlaneID string, opts ...operations.Option) (*operations.GetCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, certificateID, controlPlaneID, opts)
	} else {
		tmpRet = _mock.Called(ctx, certificateID, controlPlaneID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetCertificate")
	}

	var r0 *operations.GetCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.GetCertificateResponse, error)); ok {
		return returnFunc(ctx, certificateID, controlPlaneID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.GetCertificateResponse); ok {
		r0 = returnFunc(ctx, certificateID, controlPlaneID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, certificateID, controlPlaneID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCertificatesSDK_GetCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCertificate'
type MockCertificatesSDK_GetCertificate_Call struct {
	*mock.Call
}

// GetCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - certificateID string
//   - controlPlaneID string
//   - opts ...operations.Option
func (_e *MockCertificatesSDK_Expecter) GetCertificate(ctx interface{}, certificateID interface{}, controlPlaneID interface{}, opts ...interface{}) *MockCertificatesSDK_GetCertificate_Call {
	return &MockCertificatesSDK_GetCertificate_Call{Call: _e.mock.On("GetCertificate",
		append([]interface{}{ctx, certificateID, controlPlaneID}, opts...)...)}
}

func (_c *MockCertificatesSDK_GetCertificate_Call) Run(run func(ctx context.Context, certificateID string, controlPlaneID string, opts ...operations.Option)) *MockCertificatesSDK_GetCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockCertificatesSDK_GetCertificate_Call) Return(getCertificateResponse *operations.GetCertificateResponse, err error) *MockCertificatesSDK_GetCertificate_Call {
	_c.Call.Return(getCertificateResponse, err)
	return _c
}

func (_c *MockCertificatesSDK_GetCertificate_Call) RunAndReturn(run func(ctx context.Context, certificateID string, controlPlaneID string, opts ...operations.Option) (*operations.GetCertificateResponse, error)) *MockCertificatesSDK_GetCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// ListCertificate provides a mock function for the type MockCertificatesSDK
func (_mock *MockCertificatesSDK) ListCertificate(ctx context.Context, request operations.ListCertificateRequest, opts ...operations.Option) (*operations.ListCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListCertificate")
	}

	var r0 *operations.ListCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListCertificateRequest, ...operations.Option) (*operations.ListCertificateResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListCertificateRequest, ...operations.Option) *operations.ListCertificateResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListCertificateRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCertificatesSDK_ListCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCertificate'
type MockCertificatesSDK_ListCertificate_Call struct {
	*mock.Call
}

// ListCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.ListCertificateRequest
//   - opts ...operations.Option
func (_e *MockCertificatesSDK_Expecter) ListCertificate(ctx interface{}, request interface{}, opts ...interface{}) *MockCertificatesSDK_ListCertificate_Call {
	return &MockCertificatesSDK_ListCertificate_Call{Call: _e.mock.On("ListCertificate",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockCertificatesSDK_ListCertificate_Call) Run(run func(ctx context.Context, request operations.ListCertificateRequest, opts ...operations.Option)) *MockCertificatesSDK_ListCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.ListCertificateRequest
		if args[1] != nil {
			arg1 = args[1].(operations.ListCertificateRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCertificatesSDK_ListCertificate_Call) Return(listCertificateResponse *operations.ListCertificateResponse, err error) *MockCertificatesSDK_ListCertificate_Call {
	_c.Call.Return(listCertificateResponse, err)
	return _c
}

func (_c *MockCertificatesSDK_ListCertificate_Call) RunAndReturn(run func(ctx context.Context, request operations.ListCertificateRequest, opts ...operations.Option) (*operations.ListCertificateResponse, error)) *MockCertificatesSDK_ListCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertCertificate provides a mock function for the type MockCertificatesSDK
func (_mock *MockCertificatesSDK) UpsertCertificate(ctx context.Context, request operations.UpsertCertificateRequest, opts ...operations.Option) (*operations.UpsertCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertCertificate")
	}

	var r0 *operations.UpsertCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertCertificateRequest, ...operations.Option) (*operations.UpsertCertificateResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertCertificateRequest, ...operations.Option) *operations.UpsertCertificateResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertCertificateRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCertificatesSDK_UpsertCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertCertificate'
type MockCertificatesSDK_UpsertCertificate_Call struct {
	*mock.Call
}

// UpsertCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.UpsertCertificateRequest
//   - opts ...operations.Option
func (_e *MockCertificatesSDK_Expecter) UpsertCertificate(ctx interface{}, request interface{}, opts ...interface{}) *MockCertificatesSDK_UpsertCertificate_Call {
	return &MockCertificatesSDK_UpsertCertificate_Call{Call: _e.mock.On("UpsertCertificate",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockCertificatesSDK_UpsertCertificate_Call) Run(run func(ctx context.Context, request operations.UpsertCertificateRequest, opts ...operations.Option)) *MockCertificatesSDK_UpsertCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.UpsertCertificateRequest
		if args[1] != nil {
			arg1 = args[1].(operations.UpsertCertificateRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCertificatesSDK_UpsertCertificate_Call) Return(upsertCertificateResponse *operations.UpsertCertificateResponse, err error) *MockCertificatesSDK_UpsertCertificate_Call {
	_c.Call.Return(upsertCertificateResponse, err)
	return _c
}

func (_c *MockCertificatesSDK_UpsertCertificate_Call) RunAndReturn(run func(ctx context.Context, request operations.UpsertCertificateRequest, opts ...operations.Option) (*operations.UpsertCertificateResponse, error)) *MockCertificatesSDK_UpsertCertificate_Call {
	_c.Call.Return(run)
	return _c
}
