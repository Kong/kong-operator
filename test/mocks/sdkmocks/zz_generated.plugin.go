// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sdkmocks

import (
	"context"

	"github.com/Kong/sdk-konnect-go/models/components"
	"github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPluginSDK creates a new instance of MockPluginSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPluginSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPluginSDK {
	mock := &MockPluginSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPluginSDK is an autogenerated mock type for the PluginSDK type
type MockPluginSDK struct {
	mock.Mock
}

type MockPluginSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPluginSDK) EXPECT() *MockPluginSDK_Expecter {
	return &MockPluginSDK_Expecter{mock: &_m.Mock}
}

// CreatePlugin provides a mock function for the type MockPluginSDK
func (_mock *MockPluginSDK) CreatePlugin(ctx context.Context, controlPlaneID string, plugin components.Plugin, opts ...operations.Option) (*operations.CreatePluginResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, plugin, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, plugin)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreatePlugin")
	}

	var r0 *operations.CreatePluginResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Plugin, ...operations.Option) (*operations.CreatePluginResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, plugin, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Plugin, ...operations.Option) *operations.CreatePluginResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, plugin, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreatePluginResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, components.Plugin, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, plugin, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPluginSDK_CreatePlugin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePlugin'
type MockPluginSDK_CreatePlugin_Call struct {
	*mock.Call
}

// CreatePlugin is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - plugin components.Plugin
//   - opts ...operations.Option
func (_e *MockPluginSDK_Expecter) CreatePlugin(ctx interface{}, controlPlaneID interface{}, plugin interface{}, opts ...interface{}) *MockPluginSDK_CreatePlugin_Call {
	return &MockPluginSDK_CreatePlugin_Call{Call: _e.mock.On("CreatePlugin",
		append([]interface{}{ctx, controlPlaneID, plugin}, opts...)...)}
}

func (_c *MockPluginSDK_CreatePlugin_Call) Run(run func(ctx context.Context, controlPlaneID string, plugin components.Plugin, opts ...operations.Option)) *MockPluginSDK_CreatePlugin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 components.Plugin
		if args[2] != nil {
			arg2 = args[2].(components.Plugin)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockPluginSDK_CreatePlugin_Call) Return(createPluginResponse *operations.CreatePluginResponse, err error) *MockPluginSDK_CreatePlugin_Call {
	_c.Call.Return(createPluginResponse, err)
	return _c
}

func (_c *MockPluginSDK_CreatePlugin_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, plugin components.Plugin, opts ...operations.Option) (*operations.CreatePluginResponse, error)) *MockPluginSDK_CreatePlugin_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePlugin provides a mock function for the type MockPluginSDK
func (_mock *MockPluginSDK) DeletePlugin(ctx context.Context, controlPlaneID string, pluginID string, opts ...operations.Option) (*operations.DeletePluginResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, pluginID, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, pluginID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeletePlugin")
	}

	var r0 *operations.DeletePluginResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeletePluginResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, pluginID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeletePluginResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, pluginID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeletePluginResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, pluginID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPluginSDK_DeletePlugin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePlugin'
type MockPluginSDK_DeletePlugin_Call struct {
	*mock.Call
}

// DeletePlugin is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - pluginID string
//   - opts ...operations.Option
func (_e *MockPluginSDK_Expecter) DeletePlugin(ctx interface{}, controlPlaneID interface{}, pluginID interface{}, opts ...interface{}) *MockPluginSDK_DeletePlugin_Call {
	return &MockPluginSDK_DeletePlugin_Call{Call: _e.mock.On("DeletePlugin",
		append([]interface{}{ctx, controlPlaneID, pluginID}, opts...)...)}
}

func (_c *MockPluginSDK_DeletePlugin_Call) Run(run func(ctx context.Context, controlPlaneID string, pluginID string, opts ...operations.Option)) *MockPluginSDK_DeletePlugin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockPluginSDK_DeletePlugin_Call) Return(deletePluginResponse *operations.DeletePluginResponse, err error) *MockPluginSDK_DeletePlugin_Call {
	_c.Call.Return(deletePluginResponse, err)
	return _c
}

func (_c *MockPluginSDK_DeletePlugin_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, pluginID string, opts ...operations.Option) (*operations.DeletePluginResponse, error)) *MockPluginSDK_DeletePlugin_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlugin provides a mock function for the type MockPluginSDK
func (_mock *MockPluginSDK) GetPlugin(ctx context.Context, pluginID string, controlPlaneID string, opts ...operations.Option) (*operations.GetPluginResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, pluginID, controlPlaneID, opts)
	} else {
		tmpRet = _mock.Called(ctx, pluginID, controlPlaneID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetPlugin")
	}

	var r0 *operations.GetPluginResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.GetPluginResponse, error)); ok {
		return returnFunc(ctx, pluginID, controlPlaneID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.GetPluginResponse); ok {
		r0 = returnFunc(ctx, pluginID, controlPlaneID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetPluginResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, pluginID, controlPlaneID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPluginSDK_GetPlugin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlugin'
type MockPluginSDK_GetPlugin_Call struct {
	*mock.Call
}

// GetPlugin is a helper method to define mock.On call
//   - ctx context.Context
//   - pluginID string
//   - controlPlaneID string
//   - opts ...operations.Option
func (_e *MockPluginSDK_Expecter) GetPlugin(ctx interface{}, pluginID interface{}, controlPlaneID interface{}, opts ...interface{}) *MockPluginSDK_GetPlugin_Call {
	return &MockPluginSDK_GetPlugin_Call{Call: _e.mock.On("GetPlugin",
		append([]interface{}{ctx, pluginID, controlPlaneID}, opts...)...)}
}

func (_c *MockPluginSDK_GetPlugin_Call) Run(run func(ctx context.Context, pluginID string, controlPlaneID string, opts ...operations.Option)) *MockPluginSDK_GetPlugin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockPluginSDK_GetPlugin_Call) Return(getPluginResponse *operations.GetPluginResponse, err error) *MockPluginSDK_GetPlugin_Call {
	_c.Call.Return(getPluginResponse, err)
	return _c
}

func (_c *MockPluginSDK_GetPlugin_Call) RunAndReturn(run func(ctx context.Context, pluginID string, controlPlaneID string, opts ...operations.Option) (*operations.GetPluginResponse, error)) *MockPluginSDK_GetPlugin_Call {
	_c.Call.Return(run)
	return _c
}

// ListPlugin provides a mock function for the type MockPluginSDK
func (_mock *MockPluginSDK) ListPlugin(ctx context.Context, request operations.ListPluginRequest, opts ...operations.Option) (*operations.ListPluginResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListPlugin")
	}

	var r0 *operations.ListPluginResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListPluginRequest, ...operations.Option) (*operations.ListPluginResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListPluginRequest, ...operations.Option) *operations.ListPluginResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListPluginResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListPluginRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPluginSDK_ListPlugin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPlugin'
type MockPluginSDK_ListPlugin_Call struct {
	*mock.Call
}

// ListPlugin is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.ListPluginRequest
//   - opts ...operations.Option
func (_e *MockPluginSDK_Expecter) ListPlugin(ctx interface{}, request interface{}, opts ...interface{}) *MockPluginSDK_ListPlugin_Call {
	return &MockPluginSDK_ListPlugin_Call{Call: _e.mock.On("ListPlugin",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockPluginSDK_ListPlugin_Call) Run(run func(ctx context.Context, request operations.ListPluginRequest, opts ...operations.Option)) *MockPluginSDK_ListPlugin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.ListPluginRequest
		if args[1] != nil {
			arg1 = args[1].(operations.ListPluginRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockPluginSDK_ListPlugin_Call) Return(listPluginResponse *operations.ListPluginResponse, err error) *MockPluginSDK_ListPlugin_Call {
	_c.Call.Return(listPluginResponse, err)
	return _c
}

func (_c *MockPluginSDK_ListPlugin_Call) RunAndReturn(run func(ctx context.Context, request operations.ListPluginRequest, opts ...operations.Option) (*operations.ListPluginResponse, error)) *MockPluginSDK_ListPlugin_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertPlugin provides a mock function for the type MockPluginSDK
func (_mock *MockPluginSDK) UpsertPlugin(ctx context.Context, request operations.UpsertPluginRequest, opts ...operations.Option) (*operations.UpsertPluginResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertPlugin")
	}

	var r0 *operations.UpsertPluginResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertPluginRequest, ...operations.Option) (*operations.UpsertPluginResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertPluginRequest, ...operations.Option) *operations.UpsertPluginResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertPluginResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertPluginRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPluginSDK_UpsertPlugin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertPlugin'
type MockPluginSDK_UpsertPlugin_Call struct {
	*mock.Call
}

// UpsertPlugin is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.UpsertPluginRequest
//   - opts ...operations.Option
func (_e *MockPluginSDK_Expecter) UpsertPlugin(ctx interface{}, request interface{}, opts ...interface{}) *MockPluginSDK_UpsertPlugin_Call {
	return &MockPluginSDK_UpsertPlugin_Call{Call: _e.mock.On("UpsertPlugin",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockPluginSDK_UpsertPlugin_Call) Run(run func(ctx context.Context, request operations.UpsertPluginRequest, opts ...operations.Option)) *MockPluginSDK_UpsertPlugin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.UpsertPluginRequest
		if args[1] != nil {
			arg1 = args[1].(operations.UpsertPluginRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockPluginSDK_UpsertPlugin_Call) Return(upsertPluginResponse *operations.UpsertPluginResponse, err error) *MockPluginSDK_UpsertPlugin_Call {
	_c.Call.Return(upsertPluginResponse, err)
	return _c
}

func (_c *MockPluginSDK_UpsertPlugin_Call) RunAndReturn(run func(ctx context.Context, request operations.UpsertPluginRequest, opts ...operations.Option) (*operations.UpsertPluginResponse, error)) *MockPluginSDK_UpsertPlugin_Call {
	_c.Call.Return(run)
	return _c
}
