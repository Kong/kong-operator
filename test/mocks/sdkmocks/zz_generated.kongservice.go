// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sdkmocks

import (
	"context"

	"github.com/Kong/sdk-konnect-go/models/components"
	"github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// NewMockServicesSDK creates a new instance of MockServicesSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServicesSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServicesSDK {
	mock := &MockServicesSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServicesSDK is an autogenerated mock type for the ServicesSDK type
type MockServicesSDK struct {
	mock.Mock
}

type MockServicesSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServicesSDK) EXPECT() *MockServicesSDK_Expecter {
	return &MockServicesSDK_Expecter{mock: &_m.Mock}
}

// CreateService provides a mock function for the type MockServicesSDK
func (_mock *MockServicesSDK) CreateService(ctx context.Context, controlPlaneID string, service components.Service, opts ...operations.Option) (*operations.CreateServiceResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, service, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, service)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateService")
	}

	var r0 *operations.CreateServiceResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Service, ...operations.Option) (*operations.CreateServiceResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, service, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Service, ...operations.Option) *operations.CreateServiceResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, service, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateServiceResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, components.Service, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, service, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicesSDK_CreateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateService'
type MockServicesSDK_CreateService_Call struct {
	*mock.Call
}

// CreateService is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - service components.Service
//   - opts ...operations.Option
func (_e *MockServicesSDK_Expecter) CreateService(ctx interface{}, controlPlaneID interface{}, service interface{}, opts ...interface{}) *MockServicesSDK_CreateService_Call {
	return &MockServicesSDK_CreateService_Call{Call: _e.mock.On("CreateService",
		append([]interface{}{ctx, controlPlaneID, service}, opts...)...)}
}

func (_c *MockServicesSDK_CreateService_Call) Run(run func(ctx context.Context, controlPlaneID string, service components.Service, opts ...operations.Option)) *MockServicesSDK_CreateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 components.Service
		if args[2] != nil {
			arg2 = args[2].(components.Service)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockServicesSDK_CreateService_Call) Return(createServiceResponse *operations.CreateServiceResponse, err error) *MockServicesSDK_CreateService_Call {
	_c.Call.Return(createServiceResponse, err)
	return _c
}

func (_c *MockServicesSDK_CreateService_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, service components.Service, opts ...operations.Option) (*operations.CreateServiceResponse, error)) *MockServicesSDK_CreateService_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteService provides a mock function for the type MockServicesSDK
func (_mock *MockServicesSDK) DeleteService(ctx context.Context, controlPlaneID string, serviceID string, opts ...operations.Option) (*operations.DeleteServiceResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, serviceID, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, serviceID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteService")
	}

	var r0 *operations.DeleteServiceResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeleteServiceResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, serviceID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteServiceResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, serviceID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteServiceResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, serviceID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicesSDK_DeleteService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteService'
type MockServicesSDK_DeleteService_Call struct {
	*mock.Call
}

// DeleteService is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - serviceID string
//   - opts ...operations.Option
func (_e *MockServicesSDK_Expecter) DeleteService(ctx interface{}, controlPlaneID interface{}, serviceID interface{}, opts ...interface{}) *MockServicesSDK_DeleteService_Call {
	return &MockServicesSDK_DeleteService_Call{Call: _e.mock.On("DeleteService",
		append([]interface{}{ctx, controlPlaneID, serviceID}, opts...)...)}
}

func (_c *MockServicesSDK_DeleteService_Call) Run(run func(ctx context.Context, controlPlaneID string, serviceID string, opts ...operations.Option)) *MockServicesSDK_DeleteService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockServicesSDK_DeleteService_Call) Return(deleteServiceResponse *operations.DeleteServiceResponse, err error) *MockServicesSDK_DeleteService_Call {
	_c.Call.Return(deleteServiceResponse, err)
	return _c
}

func (_c *MockServicesSDK_DeleteService_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, serviceID string, opts ...operations.Option) (*operations.DeleteServiceResponse, error)) *MockServicesSDK_DeleteService_Call {
	_c.Call.Return(run)
	return _c
}

// GetService provides a mock function for the type MockServicesSDK
func (_mock *MockServicesSDK) GetService(ctx context.Context, serviceID string, controlPlaneID string, opts ...operations.Option) (*operations.GetServiceResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, serviceID, controlPlaneID, opts)
	} else {
		tmpRet = _mock.Called(ctx, serviceID, controlPlaneID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetService")
	}

	var r0 *operations.GetServiceResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.GetServiceResponse, error)); ok {
		return returnFunc(ctx, serviceID, controlPlaneID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.GetServiceResponse); ok {
		r0 = returnFunc(ctx, serviceID, controlPlaneID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetServiceResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, serviceID, controlPlaneID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicesSDK_GetService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetService'
type MockServicesSDK_GetService_Call struct {
	*mock.Call
}

// GetService is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceID string
//   - controlPlaneID string
//   - opts ...operations.Option
func (_e *MockServicesSDK_Expecter) GetService(ctx interface{}, serviceID interface{}, controlPlaneID interface{}, opts ...interface{}) *MockServicesSDK_GetService_Call {
	return &MockServicesSDK_GetService_Call{Call: _e.mock.On("GetService",
		append([]interface{}{ctx, serviceID, controlPlaneID}, opts...)...)}
}

func (_c *MockServicesSDK_GetService_Call) Run(run func(ctx context.Context, serviceID string, controlPlaneID string, opts ...operations.Option)) *MockServicesSDK_GetService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockServicesSDK_GetService_Call) Return(getServiceResponse *operations.GetServiceResponse, err error) *MockServicesSDK_GetService_Call {
	_c.Call.Return(getServiceResponse, err)
	return _c
}

func (_c *MockServicesSDK_GetService_Call) RunAndReturn(run func(ctx context.Context, serviceID string, controlPlaneID string, opts ...operations.Option) (*operations.GetServiceResponse, error)) *MockServicesSDK_GetService_Call {
	_c.Call.Return(run)
	return _c
}

// ListService provides a mock function for the type MockServicesSDK
func (_mock *MockServicesSDK) ListService(ctx context.Context, request operations.ListServiceRequest, opts ...operations.Option) (*operations.ListServiceResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListService")
	}

	var r0 *operations.ListServiceResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListServiceRequest, ...operations.Option) (*operations.ListServiceResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListServiceRequest, ...operations.Option) *operations.ListServiceResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListServiceResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListServiceRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicesSDK_ListService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListService'
type MockServicesSDK_ListService_Call struct {
	*mock.Call
}

// ListService is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.ListServiceRequest
//   - opts ...operations.Option
func (_e *MockServicesSDK_Expecter) ListService(ctx interface{}, request interface{}, opts ...interface{}) *MockServicesSDK_ListService_Call {
	return &MockServicesSDK_ListService_Call{Call: _e.mock.On("ListService",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockServicesSDK_ListService_Call) Run(run func(ctx context.Context, request operations.ListServiceRequest, opts ...operations.Option)) *MockServicesSDK_ListService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.ListServiceRequest
		if args[1] != nil {
			arg1 = args[1].(operations.ListServiceRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockServicesSDK_ListService_Call) Return(listServiceResponse *operations.ListServiceResponse, err error) *MockServicesSDK_ListService_Call {
	_c.Call.Return(listServiceResponse, err)
	return _c
}

func (_c *MockServicesSDK_ListService_Call) RunAndReturn(run func(ctx context.Context, request operations.ListServiceRequest, opts ...operations.Option) (*operations.ListServiceResponse, error)) *MockServicesSDK_ListService_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertService provides a mock function for the type MockServicesSDK
func (_mock *MockServicesSDK) UpsertService(ctx context.Context, req operations.UpsertServiceRequest, opts ...operations.Option) (*operations.UpsertServiceResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, req, opts)
	} else {
		tmpRet = _mock.Called(ctx, req)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertService")
	}

	var r0 *operations.UpsertServiceResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertServiceRequest, ...operations.Option) (*operations.UpsertServiceResponse, error)); ok {
		return returnFunc(ctx, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertServiceRequest, ...operations.Option) *operations.UpsertServiceResponse); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertServiceResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertServiceRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicesSDK_UpsertService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertService'
type MockServicesSDK_UpsertService_Call struct {
	*mock.Call
}

// UpsertService is a helper method to define mock.On call
//   - ctx context.Context
//   - req operations.UpsertServiceRequest
//   - opts ...operations.Option
func (_e *MockServicesSDK_Expecter) UpsertService(ctx interface{}, req interface{}, opts ...interface{}) *MockServicesSDK_UpsertService_Call {
	return &MockServicesSDK_UpsertService_Call{Call: _e.mock.On("UpsertService",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockServicesSDK_UpsertService_Call) Run(run func(ctx context.Context, req operations.UpsertServiceRequest, opts ...operations.Option)) *MockServicesSDK_UpsertService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.UpsertServiceRequest
		if args[1] != nil {
			arg1 = args[1].(operations.UpsertServiceRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockServicesSDK_UpsertService_Call) Return(upsertServiceResponse *operations.UpsertServiceResponse, err error) *MockServicesSDK_UpsertService_Call {
	_c.Call.Return(upsertServiceResponse, err)
	return _c
}

func (_c *MockServicesSDK_UpsertService_Call) RunAndReturn(run func(ctx context.Context, req operations.UpsertServiceRequest, opts ...operations.Option) (*operations.UpsertServiceResponse, error)) *MockServicesSDK_UpsertService_Call {
	_c.Call.Return(run)
	return _c
}
