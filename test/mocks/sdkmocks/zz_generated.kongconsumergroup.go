// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sdkmocks

import (
	"context"

	"github.com/Kong/sdk-konnect-go/models/components"
	"github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// NewMockConsumerGroupSDK creates a new instance of MockConsumerGroupSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsumerGroupSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsumerGroupSDK {
	mock := &MockConsumerGroupSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConsumerGroupSDK is an autogenerated mock type for the ConsumerGroupSDK type
type MockConsumerGroupSDK struct {
	mock.Mock
}

type MockConsumerGroupSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConsumerGroupSDK) EXPECT() *MockConsumerGroupSDK_Expecter {
	return &MockConsumerGroupSDK_Expecter{mock: &_m.Mock}
}

// AddConsumerToGroup provides a mock function for the type MockConsumerGroupSDK
func (_mock *MockConsumerGroupSDK) AddConsumerToGroup(ctx context.Context, request operations.AddConsumerToGroupRequest, opts ...operations.Option) (*operations.AddConsumerToGroupResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for AddConsumerToGroup")
	}

	var r0 *operations.AddConsumerToGroupResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.AddConsumerToGroupRequest, ...operations.Option) (*operations.AddConsumerToGroupResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.AddConsumerToGroupRequest, ...operations.Option) *operations.AddConsumerToGroupResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.AddConsumerToGroupResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.AddConsumerToGroupRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumerGroupSDK_AddConsumerToGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddConsumerToGroup'
type MockConsumerGroupSDK_AddConsumerToGroup_Call struct {
	*mock.Call
}

// AddConsumerToGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.AddConsumerToGroupRequest
//   - opts ...operations.Option
func (_e *MockConsumerGroupSDK_Expecter) AddConsumerToGroup(ctx interface{}, request interface{}, opts ...interface{}) *MockConsumerGroupSDK_AddConsumerToGroup_Call {
	return &MockConsumerGroupSDK_AddConsumerToGroup_Call{Call: _e.mock.On("AddConsumerToGroup",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockConsumerGroupSDK_AddConsumerToGroup_Call) Run(run func(ctx context.Context, request operations.AddConsumerToGroupRequest, opts ...operations.Option)) *MockConsumerGroupSDK_AddConsumerToGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.AddConsumerToGroupRequest
		if args[1] != nil {
			arg1 = args[1].(operations.AddConsumerToGroupRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockConsumerGroupSDK_AddConsumerToGroup_Call) Return(addConsumerToGroupResponse *operations.AddConsumerToGroupResponse, err error) *MockConsumerGroupSDK_AddConsumerToGroup_Call {
	_c.Call.Return(addConsumerToGroupResponse, err)
	return _c
}

func (_c *MockConsumerGroupSDK_AddConsumerToGroup_Call) RunAndReturn(run func(ctx context.Context, request operations.AddConsumerToGroupRequest, opts ...operations.Option) (*operations.AddConsumerToGroupResponse, error)) *MockConsumerGroupSDK_AddConsumerToGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateConsumerGroup provides a mock function for the type MockConsumerGroupSDK
func (_mock *MockConsumerGroupSDK) CreateConsumerGroup(ctx context.Context, controlPlaneID string, consumerInput components.ConsumerGroup, opts ...operations.Option) (*operations.CreateConsumerGroupResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, consumerInput, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, consumerInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateConsumerGroup")
	}

	var r0 *operations.CreateConsumerGroupResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.ConsumerGroup, ...operations.Option) (*operations.CreateConsumerGroupResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, consumerInput, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.ConsumerGroup, ...operations.Option) *operations.CreateConsumerGroupResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, consumerInput, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateConsumerGroupResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, components.ConsumerGroup, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, consumerInput, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumerGroupSDK_CreateConsumerGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConsumerGroup'
type MockConsumerGroupSDK_CreateConsumerGroup_Call struct {
	*mock.Call
}

// CreateConsumerGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - consumerInput components.ConsumerGroup
//   - opts ...operations.Option
func (_e *MockConsumerGroupSDK_Expecter) CreateConsumerGroup(ctx interface{}, controlPlaneID interface{}, consumerInput interface{}, opts ...interface{}) *MockConsumerGroupSDK_CreateConsumerGroup_Call {
	return &MockConsumerGroupSDK_CreateConsumerGroup_Call{Call: _e.mock.On("CreateConsumerGroup",
		append([]interface{}{ctx, controlPlaneID, consumerInput}, opts...)...)}
}

func (_c *MockConsumerGroupSDK_CreateConsumerGroup_Call) Run(run func(ctx context.Context, controlPlaneID string, consumerInput components.ConsumerGroup, opts ...operations.Option)) *MockConsumerGroupSDK_CreateConsumerGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 components.ConsumerGroup
		if args[2] != nil {
			arg2 = args[2].(components.ConsumerGroup)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockConsumerGroupSDK_CreateConsumerGroup_Call) Return(createConsumerGroupResponse *operations.CreateConsumerGroupResponse, err error) *MockConsumerGroupSDK_CreateConsumerGroup_Call {
	_c.Call.Return(createConsumerGroupResponse, err)
	return _c
}

func (_c *MockConsumerGroupSDK_CreateConsumerGroup_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, consumerInput components.ConsumerGroup, opts ...operations.Option) (*operations.CreateConsumerGroupResponse, error)) *MockConsumerGroupSDK_CreateConsumerGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteConsumerGroup provides a mock function for the type MockConsumerGroupSDK
func (_mock *MockConsumerGroupSDK) DeleteConsumerGroup(ctx context.Context, controlPlaneID string, consumerID string, opts ...operations.Option) (*operations.DeleteConsumerGroupResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, consumerID, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, consumerID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteConsumerGroup")
	}

	var r0 *operations.DeleteConsumerGroupResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeleteConsumerGroupResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, consumerID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteConsumerGroupResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, consumerID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteConsumerGroupResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, consumerID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumerGroupSDK_DeleteConsumerGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteConsumerGroup'
type MockConsumerGroupSDK_DeleteConsumerGroup_Call struct {
	*mock.Call
}

// DeleteConsumerGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - consumerID string
//   - opts ...operations.Option
func (_e *MockConsumerGroupSDK_Expecter) DeleteConsumerGroup(ctx interface{}, controlPlaneID interface{}, consumerID interface{}, opts ...interface{}) *MockConsumerGroupSDK_DeleteConsumerGroup_Call {
	return &MockConsumerGroupSDK_DeleteConsumerGroup_Call{Call: _e.mock.On("DeleteConsumerGroup",
		append([]interface{}{ctx, controlPlaneID, consumerID}, opts...)...)}
}

func (_c *MockConsumerGroupSDK_DeleteConsumerGroup_Call) Run(run func(ctx context.Context, controlPlaneID string, consumerID string, opts ...operations.Option)) *MockConsumerGroupSDK_DeleteConsumerGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockConsumerGroupSDK_DeleteConsumerGroup_Call) Return(deleteConsumerGroupResponse *operations.DeleteConsumerGroupResponse, err error) *MockConsumerGroupSDK_DeleteConsumerGroup_Call {
	_c.Call.Return(deleteConsumerGroupResponse, err)
	return _c
}

func (_c *MockConsumerGroupSDK_DeleteConsumerGroup_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, consumerID string, opts ...operations.Option) (*operations.DeleteConsumerGroupResponse, error)) *MockConsumerGroupSDK_DeleteConsumerGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetConsumerGroup provides a mock function for the type MockConsumerGroupSDK
func (_mock *MockConsumerGroupSDK) GetConsumerGroup(ctx context.Context, consumerGroupID string, controlPlaneID string, opts ...operations.Option) (*operations.GetConsumerGroupResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, consumerGroupID, controlPlaneID, opts)
	} else {
		tmpRet = _mock.Called(ctx, consumerGroupID, controlPlaneID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetConsumerGroup")
	}

	var r0 *operations.GetConsumerGroupResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.GetConsumerGroupResponse, error)); ok {
		return returnFunc(ctx, consumerGroupID, controlPlaneID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.GetConsumerGroupResponse); ok {
		r0 = returnFunc(ctx, consumerGroupID, controlPlaneID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetConsumerGroupResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, consumerGroupID, controlPlaneID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumerGroupSDK_GetConsumerGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConsumerGroup'
type MockConsumerGroupSDK_GetConsumerGroup_Call struct {
	*mock.Call
}

// GetConsumerGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - consumerGroupID string
//   - controlPlaneID string
//   - opts ...operations.Option
func (_e *MockConsumerGroupSDK_Expecter) GetConsumerGroup(ctx interface{}, consumerGroupID interface{}, controlPlaneID interface{}, opts ...interface{}) *MockConsumerGroupSDK_GetConsumerGroup_Call {
	return &MockConsumerGroupSDK_GetConsumerGroup_Call{Call: _e.mock.On("GetConsumerGroup",
		append([]interface{}{ctx, consumerGroupID, controlPlaneID}, opts...)...)}
}

func (_c *MockConsumerGroupSDK_GetConsumerGroup_Call) Run(run func(ctx context.Context, consumerGroupID string, controlPlaneID string, opts ...operations.Option)) *MockConsumerGroupSDK_GetConsumerGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockConsumerGroupSDK_GetConsumerGroup_Call) Return(getConsumerGroupResponse *operations.GetConsumerGroupResponse, err error) *MockConsumerGroupSDK_GetConsumerGroup_Call {
	_c.Call.Return(getConsumerGroupResponse, err)
	return _c
}

func (_c *MockConsumerGroupSDK_GetConsumerGroup_Call) RunAndReturn(run func(ctx context.Context, consumerGroupID string, controlPlaneID string, opts ...operations.Option) (*operations.GetConsumerGroupResponse, error)) *MockConsumerGroupSDK_GetConsumerGroup_Call {
	_c.Call.Return(run)
	return _c
}

// ListConsumerGroup provides a mock function for the type MockConsumerGroupSDK
func (_mock *MockConsumerGroupSDK) ListConsumerGroup(ctx context.Context, request operations.ListConsumerGroupRequest, opts ...operations.Option) (*operations.ListConsumerGroupResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListConsumerGroup")
	}

	var r0 *operations.ListConsumerGroupResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListConsumerGroupRequest, ...operations.Option) (*operations.ListConsumerGroupResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListConsumerGroupRequest, ...operations.Option) *operations.ListConsumerGroupResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListConsumerGroupResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListConsumerGroupRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumerGroupSDK_ListConsumerGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConsumerGroup'
type MockConsumerGroupSDK_ListConsumerGroup_Call struct {
	*mock.Call
}

// ListConsumerGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.ListConsumerGroupRequest
//   - opts ...operations.Option
func (_e *MockConsumerGroupSDK_Expecter) ListConsumerGroup(ctx interface{}, request interface{}, opts ...interface{}) *MockConsumerGroupSDK_ListConsumerGroup_Call {
	return &MockConsumerGroupSDK_ListConsumerGroup_Call{Call: _e.mock.On("ListConsumerGroup",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockConsumerGroupSDK_ListConsumerGroup_Call) Run(run func(ctx context.Context, request operations.ListConsumerGroupRequest, opts ...operations.Option)) *MockConsumerGroupSDK_ListConsumerGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.ListConsumerGroupRequest
		if args[1] != nil {
			arg1 = args[1].(operations.ListConsumerGroupRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockConsumerGroupSDK_ListConsumerGroup_Call) Return(listConsumerGroupResponse *operations.ListConsumerGroupResponse, err error) *MockConsumerGroupSDK_ListConsumerGroup_Call {
	_c.Call.Return(listConsumerGroupResponse, err)
	return _c
}

func (_c *MockConsumerGroupSDK_ListConsumerGroup_Call) RunAndReturn(run func(ctx context.Context, request operations.ListConsumerGroupRequest, opts ...operations.Option) (*operations.ListConsumerGroupResponse, error)) *MockConsumerGroupSDK_ListConsumerGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveConsumerFromGroup provides a mock function for the type MockConsumerGroupSDK
func (_mock *MockConsumerGroupSDK) RemoveConsumerFromGroup(ctx context.Context, request operations.RemoveConsumerFromGroupRequest, opts ...operations.Option) (*operations.RemoveConsumerFromGroupResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RemoveConsumerFromGroup")
	}

	var r0 *operations.RemoveConsumerFromGroupResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.RemoveConsumerFromGroupRequest, ...operations.Option) (*operations.RemoveConsumerFromGroupResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.RemoveConsumerFromGroupRequest, ...operations.Option) *operations.RemoveConsumerFromGroupResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.RemoveConsumerFromGroupResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.RemoveConsumerFromGroupRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumerGroupSDK_RemoveConsumerFromGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveConsumerFromGroup'
type MockConsumerGroupSDK_RemoveConsumerFromGroup_Call struct {
	*mock.Call
}

// RemoveConsumerFromGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.RemoveConsumerFromGroupRequest
//   - opts ...operations.Option
func (_e *MockConsumerGroupSDK_Expecter) RemoveConsumerFromGroup(ctx interface{}, request interface{}, opts ...interface{}) *MockConsumerGroupSDK_RemoveConsumerFromGroup_Call {
	return &MockConsumerGroupSDK_RemoveConsumerFromGroup_Call{Call: _e.mock.On("RemoveConsumerFromGroup",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockConsumerGroupSDK_RemoveConsumerFromGroup_Call) Run(run func(ctx context.Context, request operations.RemoveConsumerFromGroupRequest, opts ...operations.Option)) *MockConsumerGroupSDK_RemoveConsumerFromGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.RemoveConsumerFromGroupRequest
		if args[1] != nil {
			arg1 = args[1].(operations.RemoveConsumerFromGroupRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockConsumerGroupSDK_RemoveConsumerFromGroup_Call) Return(removeConsumerFromGroupResponse *operations.RemoveConsumerFromGroupResponse, err error) *MockConsumerGroupSDK_RemoveConsumerFromGroup_Call {
	_c.Call.Return(removeConsumerFromGroupResponse, err)
	return _c
}

func (_c *MockConsumerGroupSDK_RemoveConsumerFromGroup_Call) RunAndReturn(run func(ctx context.Context, request operations.RemoveConsumerFromGroupRequest, opts ...operations.Option) (*operations.RemoveConsumerFromGroupResponse, error)) *MockConsumerGroupSDK_RemoveConsumerFromGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertConsumerGroup provides a mock function for the type MockConsumerGroupSDK
func (_mock *MockConsumerGroupSDK) UpsertConsumerGroup(ctx context.Context, upsertConsumerRequest operations.UpsertConsumerGroupRequest, opts ...operations.Option) (*operations.UpsertConsumerGroupResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, upsertConsumerRequest, opts)
	} else {
		tmpRet = _mock.Called(ctx, upsertConsumerRequest)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertConsumerGroup")
	}

	var r0 *operations.UpsertConsumerGroupResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertConsumerGroupRequest, ...operations.Option) (*operations.UpsertConsumerGroupResponse, error)); ok {
		return returnFunc(ctx, upsertConsumerRequest, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertConsumerGroupRequest, ...operations.Option) *operations.UpsertConsumerGroupResponse); ok {
		r0 = returnFunc(ctx, upsertConsumerRequest, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertConsumerGroupResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertConsumerGroupRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, upsertConsumerRequest, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumerGroupSDK_UpsertConsumerGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertConsumerGroup'
type MockConsumerGroupSDK_UpsertConsumerGroup_Call struct {
	*mock.Call
}

// UpsertConsumerGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - upsertConsumerRequest operations.UpsertConsumerGroupRequest
//   - opts ...operations.Option
func (_e *MockConsumerGroupSDK_Expecter) UpsertConsumerGroup(ctx interface{}, upsertConsumerRequest interface{}, opts ...interface{}) *MockConsumerGroupSDK_UpsertConsumerGroup_Call {
	return &MockConsumerGroupSDK_UpsertConsumerGroup_Call{Call: _e.mock.On("UpsertConsumerGroup",
		append([]interface{}{ctx, upsertConsumerRequest}, opts...)...)}
}

func (_c *MockConsumerGroupSDK_UpsertConsumerGroup_Call) Run(run func(ctx context.Context, upsertConsumerRequest operations.UpsertConsumerGroupRequest, opts ...operations.Option)) *MockConsumerGroupSDK_UpsertConsumerGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.UpsertConsumerGroupRequest
		if args[1] != nil {
			arg1 = args[1].(operations.UpsertConsumerGroupRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockConsumerGroupSDK_UpsertConsumerGroup_Call) Return(upsertConsumerGroupResponse *operations.UpsertConsumerGroupResponse, err error) *MockConsumerGroupSDK_UpsertConsumerGroup_Call {
	_c.Call.Return(upsertConsumerGroupResponse, err)
	return _c
}

func (_c *MockConsumerGroupSDK_UpsertConsumerGroup_Call) RunAndReturn(run func(ctx context.Context, upsertConsumerRequest operations.UpsertConsumerGroupRequest, opts ...operations.Option) (*operations.UpsertConsumerGroupResponse, error)) *MockConsumerGroupSDK_UpsertConsumerGroup_Call {
	_c.Call.Return(run)
	return _c
}
