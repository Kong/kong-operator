// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sdkmocks

import (
	"context"

	"github.com/Kong/sdk-konnect-go/models/components"
	"github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// NewMockConsumersSDK creates a new instance of MockConsumersSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsumersSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsumersSDK {
	mock := &MockConsumersSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConsumersSDK is an autogenerated mock type for the ConsumersSDK type
type MockConsumersSDK struct {
	mock.Mock
}

type MockConsumersSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConsumersSDK) EXPECT() *MockConsumersSDK_Expecter {
	return &MockConsumersSDK_Expecter{mock: &_m.Mock}
}

// CreateConsumer provides a mock function for the type MockConsumersSDK
func (_mock *MockConsumersSDK) CreateConsumer(ctx context.Context, controlPlaneID string, consumerInput components.Consumer, opts ...operations.Option) (*operations.CreateConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, consumerInput, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, consumerInput)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateConsumer")
	}

	var r0 *operations.CreateConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Consumer, ...operations.Option) (*operations.CreateConsumerResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, consumerInput, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Consumer, ...operations.Option) *operations.CreateConsumerResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, consumerInput, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, components.Consumer, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, consumerInput, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumersSDK_CreateConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConsumer'
type MockConsumersSDK_CreateConsumer_Call struct {
	*mock.Call
}

// CreateConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - consumerInput components.Consumer
//   - opts ...operations.Option
func (_e *MockConsumersSDK_Expecter) CreateConsumer(ctx interface{}, controlPlaneID interface{}, consumerInput interface{}, opts ...interface{}) *MockConsumersSDK_CreateConsumer_Call {
	return &MockConsumersSDK_CreateConsumer_Call{Call: _e.mock.On("CreateConsumer",
		append([]interface{}{ctx, controlPlaneID, consumerInput}, opts...)...)}
}

func (_c *MockConsumersSDK_CreateConsumer_Call) Run(run func(ctx context.Context, controlPlaneID string, consumerInput components.Consumer, opts ...operations.Option)) *MockConsumersSDK_CreateConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 components.Consumer
		if args[2] != nil {
			arg2 = args[2].(components.Consumer)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockConsumersSDK_CreateConsumer_Call) Return(createConsumerResponse *operations.CreateConsumerResponse, err error) *MockConsumersSDK_CreateConsumer_Call {
	_c.Call.Return(createConsumerResponse, err)
	return _c
}

func (_c *MockConsumersSDK_CreateConsumer_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, consumerInput components.Consumer, opts ...operations.Option) (*operations.CreateConsumerResponse, error)) *MockConsumersSDK_CreateConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteConsumer provides a mock function for the type MockConsumersSDK
func (_mock *MockConsumersSDK) DeleteConsumer(ctx context.Context, controlPlaneID string, consumerID string, opts ...operations.Option) (*operations.DeleteConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, consumerID, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, consumerID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteConsumer")
	}

	var r0 *operations.DeleteConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeleteConsumerResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, consumerID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteConsumerResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, consumerID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, consumerID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumersSDK_DeleteConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteConsumer'
type MockConsumersSDK_DeleteConsumer_Call struct {
	*mock.Call
}

// DeleteConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - consumerID string
//   - opts ...operations.Option
func (_e *MockConsumersSDK_Expecter) DeleteConsumer(ctx interface{}, controlPlaneID interface{}, consumerID interface{}, opts ...interface{}) *MockConsumersSDK_DeleteConsumer_Call {
	return &MockConsumersSDK_DeleteConsumer_Call{Call: _e.mock.On("DeleteConsumer",
		append([]interface{}{ctx, controlPlaneID, consumerID}, opts...)...)}
}

func (_c *MockConsumersSDK_DeleteConsumer_Call) Run(run func(ctx context.Context, controlPlaneID string, consumerID string, opts ...operations.Option)) *MockConsumersSDK_DeleteConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockConsumersSDK_DeleteConsumer_Call) Return(deleteConsumerResponse *operations.DeleteConsumerResponse, err error) *MockConsumersSDK_DeleteConsumer_Call {
	_c.Call.Return(deleteConsumerResponse, err)
	return _c
}

func (_c *MockConsumersSDK_DeleteConsumer_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, consumerID string, opts ...operations.Option) (*operations.DeleteConsumerResponse, error)) *MockConsumersSDK_DeleteConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// GetConsumer provides a mock function for the type MockConsumersSDK
func (_mock *MockConsumersSDK) GetConsumer(ctx context.Context, consumerID string, controlPlaneID string, opts ...operations.Option) (*operations.GetConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, consumerID, controlPlaneID, opts)
	} else {
		tmpRet = _mock.Called(ctx, consumerID, controlPlaneID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetConsumer")
	}

	var r0 *operations.GetConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.GetConsumerResponse, error)); ok {
		return returnFunc(ctx, consumerID, controlPlaneID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.GetConsumerResponse); ok {
		r0 = returnFunc(ctx, consumerID, controlPlaneID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, consumerID, controlPlaneID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumersSDK_GetConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConsumer'
type MockConsumersSDK_GetConsumer_Call struct {
	*mock.Call
}

// GetConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - consumerID string
//   - controlPlaneID string
//   - opts ...operations.Option
func (_e *MockConsumersSDK_Expecter) GetConsumer(ctx interface{}, consumerID interface{}, controlPlaneID interface{}, opts ...interface{}) *MockConsumersSDK_GetConsumer_Call {
	return &MockConsumersSDK_GetConsumer_Call{Call: _e.mock.On("GetConsumer",
		append([]interface{}{ctx, consumerID, controlPlaneID}, opts...)...)}
}

func (_c *MockConsumersSDK_GetConsumer_Call) Run(run func(ctx context.Context, consumerID string, controlPlaneID string, opts ...operations.Option)) *MockConsumersSDK_GetConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockConsumersSDK_GetConsumer_Call) Return(getConsumerResponse *operations.GetConsumerResponse, err error) *MockConsumersSDK_GetConsumer_Call {
	_c.Call.Return(getConsumerResponse, err)
	return _c
}

func (_c *MockConsumersSDK_GetConsumer_Call) RunAndReturn(run func(ctx context.Context, consumerID string, controlPlaneID string, opts ...operations.Option) (*operations.GetConsumerResponse, error)) *MockConsumersSDK_GetConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// ListConsumer provides a mock function for the type MockConsumersSDK
func (_mock *MockConsumersSDK) ListConsumer(ctx context.Context, request operations.ListConsumerRequest, opts ...operations.Option) (*operations.ListConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListConsumer")
	}

	var r0 *operations.ListConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListConsumerRequest, ...operations.Option) (*operations.ListConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListConsumerRequest, ...operations.Option) *operations.ListConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumersSDK_ListConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConsumer'
type MockConsumersSDK_ListConsumer_Call struct {
	*mock.Call
}

// ListConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.ListConsumerRequest
//   - opts ...operations.Option
func (_e *MockConsumersSDK_Expecter) ListConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockConsumersSDK_ListConsumer_Call {
	return &MockConsumersSDK_ListConsumer_Call{Call: _e.mock.On("ListConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockConsumersSDK_ListConsumer_Call) Run(run func(ctx context.Context, request operations.ListConsumerRequest, opts ...operations.Option)) *MockConsumersSDK_ListConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.ListConsumerRequest
		if args[1] != nil {
			arg1 = args[1].(operations.ListConsumerRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockConsumersSDK_ListConsumer_Call) Return(listConsumerResponse *operations.ListConsumerResponse, err error) *MockConsumersSDK_ListConsumer_Call {
	_c.Call.Return(listConsumerResponse, err)
	return _c
}

func (_c *MockConsumersSDK_ListConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.ListConsumerRequest, opts ...operations.Option) (*operations.ListConsumerResponse, error)) *MockConsumersSDK_ListConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// ListConsumerGroupsForConsumer provides a mock function for the type MockConsumersSDK
func (_mock *MockConsumersSDK) ListConsumerGroupsForConsumer(ctx context.Context, request operations.ListConsumerGroupsForConsumerRequest, opts ...operations.Option) (*operations.ListConsumerGroupsForConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListConsumerGroupsForConsumer")
	}

	var r0 *operations.ListConsumerGroupsForConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListConsumerGroupsForConsumerRequest, ...operations.Option) (*operations.ListConsumerGroupsForConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListConsumerGroupsForConsumerRequest, ...operations.Option) *operations.ListConsumerGroupsForConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListConsumerGroupsForConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListConsumerGroupsForConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumersSDK_ListConsumerGroupsForConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConsumerGroupsForConsumer'
type MockConsumersSDK_ListConsumerGroupsForConsumer_Call struct {
	*mock.Call
}

// ListConsumerGroupsForConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.ListConsumerGroupsForConsumerRequest
//   - opts ...operations.Option
func (_e *MockConsumersSDK_Expecter) ListConsumerGroupsForConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockConsumersSDK_ListConsumerGroupsForConsumer_Call {
	return &MockConsumersSDK_ListConsumerGroupsForConsumer_Call{Call: _e.mock.On("ListConsumerGroupsForConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockConsumersSDK_ListConsumerGroupsForConsumer_Call) Run(run func(ctx context.Context, request operations.ListConsumerGroupsForConsumerRequest, opts ...operations.Option)) *MockConsumersSDK_ListConsumerGroupsForConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.ListConsumerGroupsForConsumerRequest
		if args[1] != nil {
			arg1 = args[1].(operations.ListConsumerGroupsForConsumerRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockConsumersSDK_ListConsumerGroupsForConsumer_Call) Return(listConsumerGroupsForConsumerResponse *operations.ListConsumerGroupsForConsumerResponse, err error) *MockConsumersSDK_ListConsumerGroupsForConsumer_Call {
	_c.Call.Return(listConsumerGroupsForConsumerResponse, err)
	return _c
}

func (_c *MockConsumersSDK_ListConsumerGroupsForConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.ListConsumerGroupsForConsumerRequest, opts ...operations.Option) (*operations.ListConsumerGroupsForConsumerResponse, error)) *MockConsumersSDK_ListConsumerGroupsForConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertConsumer provides a mock function for the type MockConsumersSDK
func (_mock *MockConsumersSDK) UpsertConsumer(ctx context.Context, upsertConsumerRequest operations.UpsertConsumerRequest, opts ...operations.Option) (*operations.UpsertConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, upsertConsumerRequest, opts)
	} else {
		tmpRet = _mock.Called(ctx, upsertConsumerRequest)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertConsumer")
	}

	var r0 *operations.UpsertConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertConsumerRequest, ...operations.Option) (*operations.UpsertConsumerResponse, error)); ok {
		return returnFunc(ctx, upsertConsumerRequest, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertConsumerRequest, ...operations.Option) *operations.UpsertConsumerResponse); ok {
		r0 = returnFunc(ctx, upsertConsumerRequest, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, upsertConsumerRequest, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConsumersSDK_UpsertConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertConsumer'
type MockConsumersSDK_UpsertConsumer_Call struct {
	*mock.Call
}

// UpsertConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - upsertConsumerRequest operations.UpsertConsumerRequest
//   - opts ...operations.Option
func (_e *MockConsumersSDK_Expecter) UpsertConsumer(ctx interface{}, upsertConsumerRequest interface{}, opts ...interface{}) *MockConsumersSDK_UpsertConsumer_Call {
	return &MockConsumersSDK_UpsertConsumer_Call{Call: _e.mock.On("UpsertConsumer",
		append([]interface{}{ctx, upsertConsumerRequest}, opts...)...)}
}

func (_c *MockConsumersSDK_UpsertConsumer_Call) Run(run func(ctx context.Context, upsertConsumerRequest operations.UpsertConsumerRequest, opts ...operations.Option)) *MockConsumersSDK_UpsertConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.UpsertConsumerRequest
		if args[1] != nil {
			arg1 = args[1].(operations.UpsertConsumerRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockConsumersSDK_UpsertConsumer_Call) Return(upsertConsumerResponse *operations.UpsertConsumerResponse, err error) *MockConsumersSDK_UpsertConsumer_Call {
	_c.Call.Return(upsertConsumerResponse, err)
	return _c
}

func (_c *MockConsumersSDK_UpsertConsumer_Call) RunAndReturn(run func(ctx context.Context, upsertConsumerRequest operations.UpsertConsumerRequest, opts ...operations.Option) (*operations.UpsertConsumerResponse, error)) *MockConsumersSDK_UpsertConsumer_Call {
	_c.Call.Return(run)
	return _c
}
