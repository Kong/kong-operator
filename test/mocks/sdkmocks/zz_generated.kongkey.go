// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sdkmocks

import (
	"context"

	"github.com/Kong/sdk-konnect-go/models/components"
	"github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// NewMockKeysSDK creates a new instance of MockKeysSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKeysSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKeysSDK {
	mock := &MockKeysSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKeysSDK is an autogenerated mock type for the KeysSDK type
type MockKeysSDK struct {
	mock.Mock
}

type MockKeysSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKeysSDK) EXPECT() *MockKeysSDK_Expecter {
	return &MockKeysSDK_Expecter{mock: &_m.Mock}
}

// CreateKey provides a mock function for the type MockKeysSDK
func (_mock *MockKeysSDK) CreateKey(ctx context.Context, controlPlaneID string, Key components.Key, opts ...operations.Option) (*operations.CreateKeyResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, Key, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, Key)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateKey")
	}

	var r0 *operations.CreateKeyResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Key, ...operations.Option) (*operations.CreateKeyResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, Key, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Key, ...operations.Option) *operations.CreateKeyResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, Key, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateKeyResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, components.Key, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, Key, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeysSDK_CreateKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateKey'
type MockKeysSDK_CreateKey_Call struct {
	*mock.Call
}

// CreateKey is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - Key components.Key
//   - opts ...operations.Option
func (_e *MockKeysSDK_Expecter) CreateKey(ctx interface{}, controlPlaneID interface{}, Key interface{}, opts ...interface{}) *MockKeysSDK_CreateKey_Call {
	return &MockKeysSDK_CreateKey_Call{Call: _e.mock.On("CreateKey",
		append([]interface{}{ctx, controlPlaneID, Key}, opts...)...)}
}

func (_c *MockKeysSDK_CreateKey_Call) Run(run func(ctx context.Context, controlPlaneID string, Key components.Key, opts ...operations.Option)) *MockKeysSDK_CreateKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 components.Key
		if args[2] != nil {
			arg2 = args[2].(components.Key)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockKeysSDK_CreateKey_Call) Return(createKeyResponse *operations.CreateKeyResponse, err error) *MockKeysSDK_CreateKey_Call {
	_c.Call.Return(createKeyResponse, err)
	return _c
}

func (_c *MockKeysSDK_CreateKey_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, Key components.Key, opts ...operations.Option) (*operations.CreateKeyResponse, error)) *MockKeysSDK_CreateKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteKey provides a mock function for the type MockKeysSDK
func (_mock *MockKeysSDK) DeleteKey(ctx context.Context, controlPlaneID string, KeyID string, opts ...operations.Option) (*operations.DeleteKeyResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, KeyID, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, KeyID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteKey")
	}

	var r0 *operations.DeleteKeyResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeleteKeyResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, KeyID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteKeyResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, KeyID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteKeyResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, KeyID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeysSDK_DeleteKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteKey'
type MockKeysSDK_DeleteKey_Call struct {
	*mock.Call
}

// DeleteKey is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - KeyID string
//   - opts ...operations.Option
func (_e *MockKeysSDK_Expecter) DeleteKey(ctx interface{}, controlPlaneID interface{}, KeyID interface{}, opts ...interface{}) *MockKeysSDK_DeleteKey_Call {
	return &MockKeysSDK_DeleteKey_Call{Call: _e.mock.On("DeleteKey",
		append([]interface{}{ctx, controlPlaneID, KeyID}, opts...)...)}
}

func (_c *MockKeysSDK_DeleteKey_Call) Run(run func(ctx context.Context, controlPlaneID string, KeyID string, opts ...operations.Option)) *MockKeysSDK_DeleteKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockKeysSDK_DeleteKey_Call) Return(deleteKeyResponse *operations.DeleteKeyResponse, err error) *MockKeysSDK_DeleteKey_Call {
	_c.Call.Return(deleteKeyResponse, err)
	return _c
}

func (_c *MockKeysSDK_DeleteKey_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, KeyID string, opts ...operations.Option) (*operations.DeleteKeyResponse, error)) *MockKeysSDK_DeleteKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetKey provides a mock function for the type MockKeysSDK
func (_mock *MockKeysSDK) GetKey(ctx context.Context, keyID string, controlPlaneID string, opts ...operations.Option) (*operations.GetKeyResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, keyID, controlPlaneID, opts)
	} else {
		tmpRet = _mock.Called(ctx, keyID, controlPlaneID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetKey")
	}

	var r0 *operations.GetKeyResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.GetKeyResponse, error)); ok {
		return returnFunc(ctx, keyID, controlPlaneID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.GetKeyResponse); ok {
		r0 = returnFunc(ctx, keyID, controlPlaneID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetKeyResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, keyID, controlPlaneID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeysSDK_GetKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKey'
type MockKeysSDK_GetKey_Call struct {
	*mock.Call
}

// GetKey is a helper method to define mock.On call
//   - ctx context.Context
//   - keyID string
//   - controlPlaneID string
//   - opts ...operations.Option
func (_e *MockKeysSDK_Expecter) GetKey(ctx interface{}, keyID interface{}, controlPlaneID interface{}, opts ...interface{}) *MockKeysSDK_GetKey_Call {
	return &MockKeysSDK_GetKey_Call{Call: _e.mock.On("GetKey",
		append([]interface{}{ctx, keyID, controlPlaneID}, opts...)...)}
}

func (_c *MockKeysSDK_GetKey_Call) Run(run func(ctx context.Context, keyID string, controlPlaneID string, opts ...operations.Option)) *MockKeysSDK_GetKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockKeysSDK_GetKey_Call) Return(getKeyResponse *operations.GetKeyResponse, err error) *MockKeysSDK_GetKey_Call {
	_c.Call.Return(getKeyResponse, err)
	return _c
}

func (_c *MockKeysSDK_GetKey_Call) RunAndReturn(run func(ctx context.Context, keyID string, controlPlaneID string, opts ...operations.Option) (*operations.GetKeyResponse, error)) *MockKeysSDK_GetKey_Call {
	_c.Call.Return(run)
	return _c
}

// ListKey provides a mock function for the type MockKeysSDK
func (_mock *MockKeysSDK) ListKey(ctx context.Context, request operations.ListKeyRequest, opts ...operations.Option) (*operations.ListKeyResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListKey")
	}

	var r0 *operations.ListKeyResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListKeyRequest, ...operations.Option) (*operations.ListKeyResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListKeyRequest, ...operations.Option) *operations.ListKeyResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListKeyResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListKeyRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeysSDK_ListKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListKey'
type MockKeysSDK_ListKey_Call struct {
	*mock.Call
}

// ListKey is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.ListKeyRequest
//   - opts ...operations.Option
func (_e *MockKeysSDK_Expecter) ListKey(ctx interface{}, request interface{}, opts ...interface{}) *MockKeysSDK_ListKey_Call {
	return &MockKeysSDK_ListKey_Call{Call: _e.mock.On("ListKey",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKeysSDK_ListKey_Call) Run(run func(ctx context.Context, request operations.ListKeyRequest, opts ...operations.Option)) *MockKeysSDK_ListKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.ListKeyRequest
		if args[1] != nil {
			arg1 = args[1].(operations.ListKeyRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKeysSDK_ListKey_Call) Return(listKeyResponse *operations.ListKeyResponse, err error) *MockKeysSDK_ListKey_Call {
	_c.Call.Return(listKeyResponse, err)
	return _c
}

func (_c *MockKeysSDK_ListKey_Call) RunAndReturn(run func(ctx context.Context, request operations.ListKeyRequest, opts ...operations.Option) (*operations.ListKeyResponse, error)) *MockKeysSDK_ListKey_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertKey provides a mock function for the type MockKeysSDK
func (_mock *MockKeysSDK) UpsertKey(ctx context.Context, request operations.UpsertKeyRequest, opts ...operations.Option) (*operations.UpsertKeyResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertKey")
	}

	var r0 *operations.UpsertKeyResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertKeyRequest, ...operations.Option) (*operations.UpsertKeyResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertKeyRequest, ...operations.Option) *operations.UpsertKeyResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertKeyResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertKeyRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeysSDK_UpsertKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertKey'
type MockKeysSDK_UpsertKey_Call struct {
	*mock.Call
}

// UpsertKey is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.UpsertKeyRequest
//   - opts ...operations.Option
func (_e *MockKeysSDK_Expecter) UpsertKey(ctx interface{}, request interface{}, opts ...interface{}) *MockKeysSDK_UpsertKey_Call {
	return &MockKeysSDK_UpsertKey_Call{Call: _e.mock.On("UpsertKey",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKeysSDK_UpsertKey_Call) Run(run func(ctx context.Context, request operations.UpsertKeyRequest, opts ...operations.Option)) *MockKeysSDK_UpsertKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.UpsertKeyRequest
		if args[1] != nil {
			arg1 = args[1].(operations.UpsertKeyRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKeysSDK_UpsertKey_Call) Return(upsertKeyResponse *operations.UpsertKeyResponse, err error) *MockKeysSDK_UpsertKey_Call {
	_c.Call.Return(upsertKeyResponse, err)
	return _c
}

func (_c *MockKeysSDK_UpsertKey_Call) RunAndReturn(run func(ctx context.Context, request operations.UpsertKeyRequest, opts ...operations.Option) (*operations.UpsertKeyResponse, error)) *MockKeysSDK_UpsertKey_Call {
	_c.Call.Return(run)
	return _c
}
