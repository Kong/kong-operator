// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sdkmocks

import (
	"context"

	"github.com/Kong/sdk-konnect-go/models/components"
	"github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// NewMockKeySetsSDK creates a new instance of MockKeySetsSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKeySetsSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKeySetsSDK {
	mock := &MockKeySetsSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKeySetsSDK is an autogenerated mock type for the KeySetsSDK type
type MockKeySetsSDK struct {
	mock.Mock
}

type MockKeySetsSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKeySetsSDK) EXPECT() *MockKeySetsSDK_Expecter {
	return &MockKeySetsSDK_Expecter{mock: &_m.Mock}
}

// CreateKeySet provides a mock function for the type MockKeySetsSDK
func (_mock *MockKeySetsSDK) CreateKeySet(ctx context.Context, controlPlaneID string, keySet *components.KeySet, opts ...operations.Option) (*operations.CreateKeySetResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, keySet, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, keySet)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateKeySet")
	}

	var r0 *operations.CreateKeySetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *components.KeySet, ...operations.Option) (*operations.CreateKeySetResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, keySet, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *components.KeySet, ...operations.Option) *operations.CreateKeySetResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, keySet, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateKeySetResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *components.KeySet, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, keySet, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeySetsSDK_CreateKeySet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateKeySet'
type MockKeySetsSDK_CreateKeySet_Call struct {
	*mock.Call
}

// CreateKeySet is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - keySet *components.KeySet
//   - opts ...operations.Option
func (_e *MockKeySetsSDK_Expecter) CreateKeySet(ctx interface{}, controlPlaneID interface{}, keySet interface{}, opts ...interface{}) *MockKeySetsSDK_CreateKeySet_Call {
	return &MockKeySetsSDK_CreateKeySet_Call{Call: _e.mock.On("CreateKeySet",
		append([]interface{}{ctx, controlPlaneID, keySet}, opts...)...)}
}

func (_c *MockKeySetsSDK_CreateKeySet_Call) Run(run func(ctx context.Context, controlPlaneID string, keySet *components.KeySet, opts ...operations.Option)) *MockKeySetsSDK_CreateKeySet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *components.KeySet
		if args[2] != nil {
			arg2 = args[2].(*components.KeySet)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockKeySetsSDK_CreateKeySet_Call) Return(createKeySetResponse *operations.CreateKeySetResponse, err error) *MockKeySetsSDK_CreateKeySet_Call {
	_c.Call.Return(createKeySetResponse, err)
	return _c
}

func (_c *MockKeySetsSDK_CreateKeySet_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, keySet *components.KeySet, opts ...operations.Option) (*operations.CreateKeySetResponse, error)) *MockKeySetsSDK_CreateKeySet_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteKeySet provides a mock function for the type MockKeySetsSDK
func (_mock *MockKeySetsSDK) DeleteKeySet(ctx context.Context, controlPlaneID string, keySetID string, opts ...operations.Option) (*operations.DeleteKeySetResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, keySetID, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, keySetID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteKeySet")
	}

	var r0 *operations.DeleteKeySetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeleteKeySetResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, keySetID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteKeySetResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, keySetID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteKeySetResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, keySetID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeySetsSDK_DeleteKeySet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteKeySet'
type MockKeySetsSDK_DeleteKeySet_Call struct {
	*mock.Call
}

// DeleteKeySet is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - keySetID string
//   - opts ...operations.Option
func (_e *MockKeySetsSDK_Expecter) DeleteKeySet(ctx interface{}, controlPlaneID interface{}, keySetID interface{}, opts ...interface{}) *MockKeySetsSDK_DeleteKeySet_Call {
	return &MockKeySetsSDK_DeleteKeySet_Call{Call: _e.mock.On("DeleteKeySet",
		append([]interface{}{ctx, controlPlaneID, keySetID}, opts...)...)}
}

func (_c *MockKeySetsSDK_DeleteKeySet_Call) Run(run func(ctx context.Context, controlPlaneID string, keySetID string, opts ...operations.Option)) *MockKeySetsSDK_DeleteKeySet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockKeySetsSDK_DeleteKeySet_Call) Return(deleteKeySetResponse *operations.DeleteKeySetResponse, err error) *MockKeySetsSDK_DeleteKeySet_Call {
	_c.Call.Return(deleteKeySetResponse, err)
	return _c
}

func (_c *MockKeySetsSDK_DeleteKeySet_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, keySetID string, opts ...operations.Option) (*operations.DeleteKeySetResponse, error)) *MockKeySetsSDK_DeleteKeySet_Call {
	_c.Call.Return(run)
	return _c
}

// GetKeySet provides a mock function for the type MockKeySetsSDK
func (_mock *MockKeySetsSDK) GetKeySet(ctx context.Context, keySetID string, controlPlaneID string, opts ...operations.Option) (*operations.GetKeySetResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, keySetID, controlPlaneID, opts)
	} else {
		tmpRet = _mock.Called(ctx, keySetID, controlPlaneID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetKeySet")
	}

	var r0 *operations.GetKeySetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.GetKeySetResponse, error)); ok {
		return returnFunc(ctx, keySetID, controlPlaneID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.GetKeySetResponse); ok {
		r0 = returnFunc(ctx, keySetID, controlPlaneID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetKeySetResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, keySetID, controlPlaneID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeySetsSDK_GetKeySet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKeySet'
type MockKeySetsSDK_GetKeySet_Call struct {
	*mock.Call
}

// GetKeySet is a helper method to define mock.On call
//   - ctx context.Context
//   - keySetID string
//   - controlPlaneID string
//   - opts ...operations.Option
func (_e *MockKeySetsSDK_Expecter) GetKeySet(ctx interface{}, keySetID interface{}, controlPlaneID interface{}, opts ...interface{}) *MockKeySetsSDK_GetKeySet_Call {
	return &MockKeySetsSDK_GetKeySet_Call{Call: _e.mock.On("GetKeySet",
		append([]interface{}{ctx, keySetID, controlPlaneID}, opts...)...)}
}

func (_c *MockKeySetsSDK_GetKeySet_Call) Run(run func(ctx context.Context, keySetID string, controlPlaneID string, opts ...operations.Option)) *MockKeySetsSDK_GetKeySet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockKeySetsSDK_GetKeySet_Call) Return(getKeySetResponse *operations.GetKeySetResponse, err error) *MockKeySetsSDK_GetKeySet_Call {
	_c.Call.Return(getKeySetResponse, err)
	return _c
}

func (_c *MockKeySetsSDK_GetKeySet_Call) RunAndReturn(run func(ctx context.Context, keySetID string, controlPlaneID string, opts ...operations.Option) (*operations.GetKeySetResponse, error)) *MockKeySetsSDK_GetKeySet_Call {
	_c.Call.Return(run)
	return _c
}

// ListKeySet provides a mock function for the type MockKeySetsSDK
func (_mock *MockKeySetsSDK) ListKeySet(ctx context.Context, request operations.ListKeySetRequest, opts ...operations.Option) (*operations.ListKeySetResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListKeySet")
	}

	var r0 *operations.ListKeySetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListKeySetRequest, ...operations.Option) (*operations.ListKeySetResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListKeySetRequest, ...operations.Option) *operations.ListKeySetResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListKeySetResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListKeySetRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeySetsSDK_ListKeySet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListKeySet'
type MockKeySetsSDK_ListKeySet_Call struct {
	*mock.Call
}

// ListKeySet is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.ListKeySetRequest
//   - opts ...operations.Option
func (_e *MockKeySetsSDK_Expecter) ListKeySet(ctx interface{}, request interface{}, opts ...interface{}) *MockKeySetsSDK_ListKeySet_Call {
	return &MockKeySetsSDK_ListKeySet_Call{Call: _e.mock.On("ListKeySet",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKeySetsSDK_ListKeySet_Call) Run(run func(ctx context.Context, request operations.ListKeySetRequest, opts ...operations.Option)) *MockKeySetsSDK_ListKeySet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.ListKeySetRequest
		if args[1] != nil {
			arg1 = args[1].(operations.ListKeySetRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKeySetsSDK_ListKeySet_Call) Return(listKeySetResponse *operations.ListKeySetResponse, err error) *MockKeySetsSDK_ListKeySet_Call {
	_c.Call.Return(listKeySetResponse, err)
	return _c
}

func (_c *MockKeySetsSDK_ListKeySet_Call) RunAndReturn(run func(ctx context.Context, request operations.ListKeySetRequest, opts ...operations.Option) (*operations.ListKeySetResponse, error)) *MockKeySetsSDK_ListKeySet_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertKeySet provides a mock function for the type MockKeySetsSDK
func (_mock *MockKeySetsSDK) UpsertKeySet(ctx context.Context, request operations.UpsertKeySetRequest, opts ...operations.Option) (*operations.UpsertKeySetResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertKeySet")
	}

	var r0 *operations.UpsertKeySetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertKeySetRequest, ...operations.Option) (*operations.UpsertKeySetResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertKeySetRequest, ...operations.Option) *operations.UpsertKeySetResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertKeySetResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertKeySetRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKeySetsSDK_UpsertKeySet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertKeySet'
type MockKeySetsSDK_UpsertKeySet_Call struct {
	*mock.Call
}

// UpsertKeySet is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.UpsertKeySetRequest
//   - opts ...operations.Option
func (_e *MockKeySetsSDK_Expecter) UpsertKeySet(ctx interface{}, request interface{}, opts ...interface{}) *MockKeySetsSDK_UpsertKeySet_Call {
	return &MockKeySetsSDK_UpsertKeySet_Call{Call: _e.mock.On("UpsertKeySet",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKeySetsSDK_UpsertKeySet_Call) Run(run func(ctx context.Context, request operations.UpsertKeySetRequest, opts ...operations.Option)) *MockKeySetsSDK_UpsertKeySet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.UpsertKeySetRequest
		if args[1] != nil {
			arg1 = args[1].(operations.UpsertKeySetRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKeySetsSDK_UpsertKeySet_Call) Return(upsertKeySetResponse *operations.UpsertKeySetResponse, err error) *MockKeySetsSDK_UpsertKeySet_Call {
	_c.Call.Return(upsertKeySetResponse, err)
	return _c
}

func (_c *MockKeySetsSDK_UpsertKeySet_Call) RunAndReturn(run func(ctx context.Context, request operations.UpsertKeySetRequest, opts ...operations.Option) (*operations.UpsertKeySetResponse, error)) *MockKeySetsSDK_UpsertKeySet_Call {
	_c.Call.Return(run)
	return _c
}
