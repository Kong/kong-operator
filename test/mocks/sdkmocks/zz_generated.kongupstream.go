// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sdkmocks

import (
	"context"

	"github.com/Kong/sdk-konnect-go/models/components"
	"github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUpstreamsSDK creates a new instance of MockUpstreamsSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpstreamsSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpstreamsSDK {
	mock := &MockUpstreamsSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUpstreamsSDK is an autogenerated mock type for the UpstreamsSDK type
type MockUpstreamsSDK struct {
	mock.Mock
}

type MockUpstreamsSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpstreamsSDK) EXPECT() *MockUpstreamsSDK_Expecter {
	return &MockUpstreamsSDK_Expecter{mock: &_m.Mock}
}

// CreateUpstream provides a mock function for the type MockUpstreamsSDK
func (_mock *MockUpstreamsSDK) CreateUpstream(ctx context.Context, controlPlaneID string, upstream components.Upstream, opts ...operations.Option) (*operations.CreateUpstreamResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, upstream, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, upstream)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateUpstream")
	}

	var r0 *operations.CreateUpstreamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Upstream, ...operations.Option) (*operations.CreateUpstreamResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, upstream, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Upstream, ...operations.Option) *operations.CreateUpstreamResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, upstream, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateUpstreamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, components.Upstream, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, upstream, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUpstreamsSDK_CreateUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUpstream'
type MockUpstreamsSDK_CreateUpstream_Call struct {
	*mock.Call
}

// CreateUpstream is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - upstream components.Upstream
//   - opts ...operations.Option
func (_e *MockUpstreamsSDK_Expecter) CreateUpstream(ctx interface{}, controlPlaneID interface{}, upstream interface{}, opts ...interface{}) *MockUpstreamsSDK_CreateUpstream_Call {
	return &MockUpstreamsSDK_CreateUpstream_Call{Call: _e.mock.On("CreateUpstream",
		append([]interface{}{ctx, controlPlaneID, upstream}, opts...)...)}
}

func (_c *MockUpstreamsSDK_CreateUpstream_Call) Run(run func(ctx context.Context, controlPlaneID string, upstream components.Upstream, opts ...operations.Option)) *MockUpstreamsSDK_CreateUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 components.Upstream
		if args[2] != nil {
			arg2 = args[2].(components.Upstream)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockUpstreamsSDK_CreateUpstream_Call) Return(createUpstreamResponse *operations.CreateUpstreamResponse, err error) *MockUpstreamsSDK_CreateUpstream_Call {
	_c.Call.Return(createUpstreamResponse, err)
	return _c
}

func (_c *MockUpstreamsSDK_CreateUpstream_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, upstream components.Upstream, opts ...operations.Option) (*operations.CreateUpstreamResponse, error)) *MockUpstreamsSDK_CreateUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUpstream provides a mock function for the type MockUpstreamsSDK
func (_mock *MockUpstreamsSDK) DeleteUpstream(ctx context.Context, controlPlaneID string, upstreamID string, opts ...operations.Option) (*operations.DeleteUpstreamResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, upstreamID, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, upstreamID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteUpstream")
	}

	var r0 *operations.DeleteUpstreamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeleteUpstreamResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, upstreamID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteUpstreamResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, upstreamID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteUpstreamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, upstreamID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUpstreamsSDK_DeleteUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUpstream'
type MockUpstreamsSDK_DeleteUpstream_Call struct {
	*mock.Call
}

// DeleteUpstream is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - upstreamID string
//   - opts ...operations.Option
func (_e *MockUpstreamsSDK_Expecter) DeleteUpstream(ctx interface{}, controlPlaneID interface{}, upstreamID interface{}, opts ...interface{}) *MockUpstreamsSDK_DeleteUpstream_Call {
	return &MockUpstreamsSDK_DeleteUpstream_Call{Call: _e.mock.On("DeleteUpstream",
		append([]interface{}{ctx, controlPlaneID, upstreamID}, opts...)...)}
}

func (_c *MockUpstreamsSDK_DeleteUpstream_Call) Run(run func(ctx context.Context, controlPlaneID string, upstreamID string, opts ...operations.Option)) *MockUpstreamsSDK_DeleteUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockUpstreamsSDK_DeleteUpstream_Call) Return(deleteUpstreamResponse *operations.DeleteUpstreamResponse, err error) *MockUpstreamsSDK_DeleteUpstream_Call {
	_c.Call.Return(deleteUpstreamResponse, err)
	return _c
}

func (_c *MockUpstreamsSDK_DeleteUpstream_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, upstreamID string, opts ...operations.Option) (*operations.DeleteUpstreamResponse, error)) *MockUpstreamsSDK_DeleteUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// GetUpstream provides a mock function for the type MockUpstreamsSDK
func (_mock *MockUpstreamsSDK) GetUpstream(ctx context.Context, upstreamID string, controlPlaneID string, opts ...operations.Option) (*operations.GetUpstreamResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, upstreamID, controlPlaneID, opts)
	} else {
		tmpRet = _mock.Called(ctx, upstreamID, controlPlaneID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetUpstream")
	}

	var r0 *operations.GetUpstreamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.GetUpstreamResponse, error)); ok {
		return returnFunc(ctx, upstreamID, controlPlaneID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.GetUpstreamResponse); ok {
		r0 = returnFunc(ctx, upstreamID, controlPlaneID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetUpstreamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, upstreamID, controlPlaneID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUpstreamsSDK_GetUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpstream'
type MockUpstreamsSDK_GetUpstream_Call struct {
	*mock.Call
}

// GetUpstream is a helper method to define mock.On call
//   - ctx context.Context
//   - upstreamID string
//   - controlPlaneID string
//   - opts ...operations.Option
func (_e *MockUpstreamsSDK_Expecter) GetUpstream(ctx interface{}, upstreamID interface{}, controlPlaneID interface{}, opts ...interface{}) *MockUpstreamsSDK_GetUpstream_Call {
	return &MockUpstreamsSDK_GetUpstream_Call{Call: _e.mock.On("GetUpstream",
		append([]interface{}{ctx, upstreamID, controlPlaneID}, opts...)...)}
}

func (_c *MockUpstreamsSDK_GetUpstream_Call) Run(run func(ctx context.Context, upstreamID string, controlPlaneID string, opts ...operations.Option)) *MockUpstreamsSDK_GetUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockUpstreamsSDK_GetUpstream_Call) Return(getUpstreamResponse *operations.GetUpstreamResponse, err error) *MockUpstreamsSDK_GetUpstream_Call {
	_c.Call.Return(getUpstreamResponse, err)
	return _c
}

func (_c *MockUpstreamsSDK_GetUpstream_Call) RunAndReturn(run func(ctx context.Context, upstreamID string, controlPlaneID string, opts ...operations.Option) (*operations.GetUpstreamResponse, error)) *MockUpstreamsSDK_GetUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// ListUpstream provides a mock function for the type MockUpstreamsSDK
func (_mock *MockUpstreamsSDK) ListUpstream(ctx context.Context, request operations.ListUpstreamRequest, opts ...operations.Option) (*operations.ListUpstreamResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListUpstream")
	}

	var r0 *operations.ListUpstreamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListUpstreamRequest, ...operations.Option) (*operations.ListUpstreamResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListUpstreamRequest, ...operations.Option) *operations.ListUpstreamResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListUpstreamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListUpstreamRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUpstreamsSDK_ListUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUpstream'
type MockUpstreamsSDK_ListUpstream_Call struct {
	*mock.Call
}

// ListUpstream is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.ListUpstreamRequest
//   - opts ...operations.Option
func (_e *MockUpstreamsSDK_Expecter) ListUpstream(ctx interface{}, request interface{}, opts ...interface{}) *MockUpstreamsSDK_ListUpstream_Call {
	return &MockUpstreamsSDK_ListUpstream_Call{Call: _e.mock.On("ListUpstream",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockUpstreamsSDK_ListUpstream_Call) Run(run func(ctx context.Context, request operations.ListUpstreamRequest, opts ...operations.Option)) *MockUpstreamsSDK_ListUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.ListUpstreamRequest
		if args[1] != nil {
			arg1 = args[1].(operations.ListUpstreamRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockUpstreamsSDK_ListUpstream_Call) Return(listUpstreamResponse *operations.ListUpstreamResponse, err error) *MockUpstreamsSDK_ListUpstream_Call {
	_c.Call.Return(listUpstreamResponse, err)
	return _c
}

func (_c *MockUpstreamsSDK_ListUpstream_Call) RunAndReturn(run func(ctx context.Context, request operations.ListUpstreamRequest, opts ...operations.Option) (*operations.ListUpstreamResponse, error)) *MockUpstreamsSDK_ListUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertUpstream provides a mock function for the type MockUpstreamsSDK
func (_mock *MockUpstreamsSDK) UpsertUpstream(ctx context.Context, req operations.UpsertUpstreamRequest, opts ...operations.Option) (*operations.UpsertUpstreamResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, req, opts)
	} else {
		tmpRet = _mock.Called(ctx, req)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertUpstream")
	}

	var r0 *operations.UpsertUpstreamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertUpstreamRequest, ...operations.Option) (*operations.UpsertUpstreamResponse, error)); ok {
		return returnFunc(ctx, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertUpstreamRequest, ...operations.Option) *operations.UpsertUpstreamResponse); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertUpstreamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertUpstreamRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUpstreamsSDK_UpsertUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertUpstream'
type MockUpstreamsSDK_UpsertUpstream_Call struct {
	*mock.Call
}

// UpsertUpstream is a helper method to define mock.On call
//   - ctx context.Context
//   - req operations.UpsertUpstreamRequest
//   - opts ...operations.Option
func (_e *MockUpstreamsSDK_Expecter) UpsertUpstream(ctx interface{}, req interface{}, opts ...interface{}) *MockUpstreamsSDK_UpsertUpstream_Call {
	return &MockUpstreamsSDK_UpsertUpstream_Call{Call: _e.mock.On("UpsertUpstream",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockUpstreamsSDK_UpsertUpstream_Call) Run(run func(ctx context.Context, req operations.UpsertUpstreamRequest, opts ...operations.Option)) *MockUpstreamsSDK_UpsertUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.UpsertUpstreamRequest
		if args[1] != nil {
			arg1 = args[1].(operations.UpsertUpstreamRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockUpstreamsSDK_UpsertUpstream_Call) Return(upsertUpstreamResponse *operations.UpsertUpstreamResponse, err error) *MockUpstreamsSDK_UpsertUpstream_Call {
	_c.Call.Return(upsertUpstreamResponse, err)
	return _c
}

func (_c *MockUpstreamsSDK_UpsertUpstream_Call) RunAndReturn(run func(ctx context.Context, req operations.UpsertUpstreamRequest, opts ...operations.Option) (*operations.UpsertUpstreamResponse, error)) *MockUpstreamsSDK_UpsertUpstream_Call {
	_c.Call.Return(run)
	return _c
}
