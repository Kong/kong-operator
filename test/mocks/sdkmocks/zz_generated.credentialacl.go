// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sdkmocks

import (
	"context"

	"github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// NewMockKongCredentialACLSDK creates a new instance of MockKongCredentialACLSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKongCredentialACLSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKongCredentialACLSDK {
	mock := &MockKongCredentialACLSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKongCredentialACLSDK is an autogenerated mock type for the KongCredentialACLSDK type
type MockKongCredentialACLSDK struct {
	mock.Mock
}

type MockKongCredentialACLSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKongCredentialACLSDK) EXPECT() *MockKongCredentialACLSDK_Expecter {
	return &MockKongCredentialACLSDK_Expecter{mock: &_m.Mock}
}

// CreateACLWithConsumer provides a mock function for the type MockKongCredentialACLSDK
func (_mock *MockKongCredentialACLSDK) CreateACLWithConsumer(ctx context.Context, req operations.CreateACLWithConsumerRequest, opts ...operations.Option) (*operations.CreateACLWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, req, opts)
	} else {
		tmpRet = _mock.Called(ctx, req)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateACLWithConsumer")
	}

	var r0 *operations.CreateACLWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateACLWithConsumerRequest, ...operations.Option) (*operations.CreateACLWithConsumerResponse, error)); ok {
		return returnFunc(ctx, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateACLWithConsumerRequest, ...operations.Option) *operations.CreateACLWithConsumerResponse); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateACLWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.CreateACLWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialACLSDK_CreateACLWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateACLWithConsumer'
type MockKongCredentialACLSDK_CreateACLWithConsumer_Call struct {
	*mock.Call
}

// CreateACLWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - req operations.CreateACLWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialACLSDK_Expecter) CreateACLWithConsumer(ctx interface{}, req interface{}, opts ...interface{}) *MockKongCredentialACLSDK_CreateACLWithConsumer_Call {
	return &MockKongCredentialACLSDK_CreateACLWithConsumer_Call{Call: _e.mock.On("CreateACLWithConsumer",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockKongCredentialACLSDK_CreateACLWithConsumer_Call) Run(run func(ctx context.Context, req operations.CreateACLWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialACLSDK_CreateACLWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.CreateACLWithConsumerRequest
		if args[1] != nil {
			arg1 = args[1].(operations.CreateACLWithConsumerRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKongCredentialACLSDK_CreateACLWithConsumer_Call) Return(createACLWithConsumerResponse *operations.CreateACLWithConsumerResponse, err error) *MockKongCredentialACLSDK_CreateACLWithConsumer_Call {
	_c.Call.Return(createACLWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialACLSDK_CreateACLWithConsumer_Call) RunAndReturn(run func(ctx context.Context, req operations.CreateACLWithConsumerRequest, opts ...operations.Option) (*operations.CreateACLWithConsumerResponse, error)) *MockKongCredentialACLSDK_CreateACLWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteACLWithConsumer provides a mock function for the type MockKongCredentialACLSDK
func (_mock *MockKongCredentialACLSDK) DeleteACLWithConsumer(ctx context.Context, request operations.DeleteACLWithConsumerRequest, opts ...operations.Option) (*operations.DeleteACLWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteACLWithConsumer")
	}

	var r0 *operations.DeleteACLWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteACLWithConsumerRequest, ...operations.Option) (*operations.DeleteACLWithConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteACLWithConsumerRequest, ...operations.Option) *operations.DeleteACLWithConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteACLWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.DeleteACLWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialACLSDK_DeleteACLWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteACLWithConsumer'
type MockKongCredentialACLSDK_DeleteACLWithConsumer_Call struct {
	*mock.Call
}

// DeleteACLWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.DeleteACLWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialACLSDK_Expecter) DeleteACLWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialACLSDK_DeleteACLWithConsumer_Call {
	return &MockKongCredentialACLSDK_DeleteACLWithConsumer_Call{Call: _e.mock.On("DeleteACLWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialACLSDK_DeleteACLWithConsumer_Call) Run(run func(ctx context.Context, request operations.DeleteACLWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialACLSDK_DeleteACLWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.DeleteACLWithConsumerRequest
		if args[1] != nil {
			arg1 = args[1].(operations.DeleteACLWithConsumerRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKongCredentialACLSDK_DeleteACLWithConsumer_Call) Return(deleteACLWithConsumerResponse *operations.DeleteACLWithConsumerResponse, err error) *MockKongCredentialACLSDK_DeleteACLWithConsumer_Call {
	_c.Call.Return(deleteACLWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialACLSDK_DeleteACLWithConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.DeleteACLWithConsumerRequest, opts ...operations.Option) (*operations.DeleteACLWithConsumerResponse, error)) *MockKongCredentialACLSDK_DeleteACLWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// GetACLWithConsumer provides a mock function for the type MockKongCredentialACLSDK
func (_mock *MockKongCredentialACLSDK) GetACLWithConsumer(ctx context.Context, request operations.GetACLWithConsumerRequest, opts ...operations.Option) (*operations.GetACLWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetACLWithConsumer")
	}

	var r0 *operations.GetACLWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.GetACLWithConsumerRequest, ...operations.Option) (*operations.GetACLWithConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.GetACLWithConsumerRequest, ...operations.Option) *operations.GetACLWithConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetACLWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.GetACLWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialACLSDK_GetACLWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetACLWithConsumer'
type MockKongCredentialACLSDK_GetACLWithConsumer_Call struct {
	*mock.Call
}

// GetACLWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.GetACLWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialACLSDK_Expecter) GetACLWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialACLSDK_GetACLWithConsumer_Call {
	return &MockKongCredentialACLSDK_GetACLWithConsumer_Call{Call: _e.mock.On("GetACLWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialACLSDK_GetACLWithConsumer_Call) Run(run func(ctx context.Context, request operations.GetACLWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialACLSDK_GetACLWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.GetACLWithConsumerRequest
		if args[1] != nil {
			arg1 = args[1].(operations.GetACLWithConsumerRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKongCredentialACLSDK_GetACLWithConsumer_Call) Return(getACLWithConsumerResponse *operations.GetACLWithConsumerResponse, err error) *MockKongCredentialACLSDK_GetACLWithConsumer_Call {
	_c.Call.Return(getACLWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialACLSDK_GetACLWithConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.GetACLWithConsumerRequest, opts ...operations.Option) (*operations.GetACLWithConsumerResponse, error)) *MockKongCredentialACLSDK_GetACLWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// ListACL provides a mock function for the type MockKongCredentialACLSDK
func (_mock *MockKongCredentialACLSDK) ListACL(ctx context.Context, request operations.ListACLRequest, opts ...operations.Option) (*operations.ListACLResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListACL")
	}

	var r0 *operations.ListACLResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListACLRequest, ...operations.Option) (*operations.ListACLResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListACLRequest, ...operations.Option) *operations.ListACLResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListACLResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListACLRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialACLSDK_ListACL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListACL'
type MockKongCredentialACLSDK_ListACL_Call struct {
	*mock.Call
}

// ListACL is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.ListACLRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialACLSDK_Expecter) ListACL(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialACLSDK_ListACL_Call {
	return &MockKongCredentialACLSDK_ListACL_Call{Call: _e.mock.On("ListACL",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialACLSDK_ListACL_Call) Run(run func(ctx context.Context, request operations.ListACLRequest, opts ...operations.Option)) *MockKongCredentialACLSDK_ListACL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.ListACLRequest
		if args[1] != nil {
			arg1 = args[1].(operations.ListACLRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKongCredentialACLSDK_ListACL_Call) Return(listACLResponse *operations.ListACLResponse, err error) *MockKongCredentialACLSDK_ListACL_Call {
	_c.Call.Return(listACLResponse, err)
	return _c
}

func (_c *MockKongCredentialACLSDK_ListACL_Call) RunAndReturn(run func(ctx context.Context, request operations.ListACLRequest, opts ...operations.Option) (*operations.ListACLResponse, error)) *MockKongCredentialACLSDK_ListACL_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertACLWithConsumer provides a mock function for the type MockKongCredentialACLSDK
func (_mock *MockKongCredentialACLSDK) UpsertACLWithConsumer(ctx context.Context, request operations.UpsertACLWithConsumerRequest, opts ...operations.Option) (*operations.UpsertACLWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertACLWithConsumer")
	}

	var r0 *operations.UpsertACLWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertACLWithConsumerRequest, ...operations.Option) (*operations.UpsertACLWithConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertACLWithConsumerRequest, ...operations.Option) *operations.UpsertACLWithConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertACLWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertACLWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialACLSDK_UpsertACLWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertACLWithConsumer'
type MockKongCredentialACLSDK_UpsertACLWithConsumer_Call struct {
	*mock.Call
}

// UpsertACLWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.UpsertACLWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialACLSDK_Expecter) UpsertACLWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialACLSDK_UpsertACLWithConsumer_Call {
	return &MockKongCredentialACLSDK_UpsertACLWithConsumer_Call{Call: _e.mock.On("UpsertACLWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialACLSDK_UpsertACLWithConsumer_Call) Run(run func(ctx context.Context, request operations.UpsertACLWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialACLSDK_UpsertACLWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.UpsertACLWithConsumerRequest
		if args[1] != nil {
			arg1 = args[1].(operations.UpsertACLWithConsumerRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKongCredentialACLSDK_UpsertACLWithConsumer_Call) Return(upsertACLWithConsumerResponse *operations.UpsertACLWithConsumerResponse, err error) *MockKongCredentialACLSDK_UpsertACLWithConsumer_Call {
	_c.Call.Return(upsertACLWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialACLSDK_UpsertACLWithConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.UpsertACLWithConsumerRequest, opts ...operations.Option) (*operations.UpsertACLWithConsumerResponse, error)) *MockKongCredentialACLSDK_UpsertACLWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}
