/*
Copyright 2021 Kong, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	clientset "github.com/kong/kubernetes-configuration/v2/pkg/clientset"
	configurationv1 "github.com/kong/kubernetes-configuration/v2/pkg/clientset/typed/configuration/v1"
	fakeconfigurationv1 "github.com/kong/kubernetes-configuration/v2/pkg/clientset/typed/configuration/v1/fake"
	configurationv1alpha1 "github.com/kong/kubernetes-configuration/v2/pkg/clientset/typed/configuration/v1alpha1"
	fakeconfigurationv1alpha1 "github.com/kong/kubernetes-configuration/v2/pkg/clientset/typed/configuration/v1alpha1/fake"
	configurationv1beta1 "github.com/kong/kubernetes-configuration/v2/pkg/clientset/typed/configuration/v1beta1"
	fakeconfigurationv1beta1 "github.com/kong/kubernetes-configuration/v2/pkg/clientset/typed/configuration/v1beta1/fake"
	gatewayoperatorv1alpha1 "github.com/kong/kubernetes-configuration/v2/pkg/clientset/typed/gateway-operator/v1alpha1"
	fakegatewayoperatorv1alpha1 "github.com/kong/kubernetes-configuration/v2/pkg/clientset/typed/gateway-operator/v1alpha1/fake"
	gatewayoperatorv1beta1 "github.com/kong/kubernetes-configuration/v2/pkg/clientset/typed/gateway-operator/v1beta1"
	fakegatewayoperatorv1beta1 "github.com/kong/kubernetes-configuration/v2/pkg/clientset/typed/gateway-operator/v1beta1/fake"
	gatewayoperatorv2beta1 "github.com/kong/kubernetes-configuration/v2/pkg/clientset/typed/gateway-operator/v2beta1"
	fakegatewayoperatorv2beta1 "github.com/kong/kubernetes-configuration/v2/pkg/clientset/typed/gateway-operator/v2beta1/fake"
	incubatorv1alpha1 "github.com/kong/kubernetes-configuration/v2/pkg/clientset/typed/incubator/v1alpha1"
	fakeincubatorv1alpha1 "github.com/kong/kubernetes-configuration/v2/pkg/clientset/typed/incubator/v1alpha1/fake"
	konnectv1alpha1 "github.com/kong/kubernetes-configuration/v2/pkg/clientset/typed/konnect/v1alpha1"
	fakekonnectv1alpha1 "github.com/kong/kubernetes-configuration/v2/pkg/clientset/typed/konnect/v1alpha1/fake"
	konnectv1alpha2 "github.com/kong/kubernetes-configuration/v2/pkg/clientset/typed/konnect/v1alpha2"
	fakekonnectv1alpha2 "github.com/kong/kubernetes-configuration/v2/pkg/clientset/typed/konnect/v1alpha2/fake"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/discovery"
	fakediscovery "k8s.io/client-go/discovery/fake"
	"k8s.io/client-go/testing"
)

// NewSimpleClientset returns a clientset that will respond with the provided objects.
// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
// without applying any field management, validations and/or defaults. It shouldn't be considered a replacement
// for a real clientset and is mostly useful in simple unit tests.
//
// DEPRECATED: NewClientset replaces this with support for field management, which significantly improves
// server side apply testing. NewClientset is only available when apply configurations are generated (e.g.
// via --with-applyconfig).
func NewSimpleClientset(objects ...runtime.Object) *Clientset {
	o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())
	for _, obj := range objects {
		if err := o.Add(obj); err != nil {
			panic(err)
		}
	}

	cs := &Clientset{tracker: o}
	cs.discovery = &fakediscovery.FakeDiscovery{Fake: &cs.Fake}
	cs.AddReactor("*", "*", testing.ObjectReaction(o))
	cs.AddWatchReactor("*", func(action testing.Action) (handled bool, ret watch.Interface, err error) {
		var opts metav1.ListOptions
		if watchActcion, ok := action.(testing.WatchActionImpl); ok {
			opts = watchActcion.ListOptions
		}
		gvr := action.GetResource()
		ns := action.GetNamespace()
		watch, err := o.Watch(gvr, ns, opts)
		if err != nil {
			return false, nil, err
		}
		return true, watch, nil
	})

	return cs
}

// Clientset implements clientset.Interface. Meant to be embedded into a
// struct to get a default implementation. This makes faking out just the method
// you want to test easier.
type Clientset struct {
	testing.Fake
	discovery *fakediscovery.FakeDiscovery
	tracker   testing.ObjectTracker
}

func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	return c.discovery
}

func (c *Clientset) Tracker() testing.ObjectTracker {
	return c.tracker
}

var (
	_ clientset.Interface = &Clientset{}
	_ testing.FakeClient  = &Clientset{}
)

// ConfigurationV1 retrieves the ConfigurationV1Client
func (c *Clientset) ConfigurationV1() configurationv1.ConfigurationV1Interface {
	return &fakeconfigurationv1.FakeConfigurationV1{Fake: &c.Fake}
}

// ConfigurationV1alpha1 retrieves the ConfigurationV1alpha1Client
func (c *Clientset) ConfigurationV1alpha1() configurationv1alpha1.ConfigurationV1alpha1Interface {
	return &fakeconfigurationv1alpha1.FakeConfigurationV1alpha1{Fake: &c.Fake}
}

// ConfigurationV1beta1 retrieves the ConfigurationV1beta1Client
func (c *Clientset) ConfigurationV1beta1() configurationv1beta1.ConfigurationV1beta1Interface {
	return &fakeconfigurationv1beta1.FakeConfigurationV1beta1{Fake: &c.Fake}
}

// GatewayOperatorV1alpha1 retrieves the GatewayOperatorV1alpha1Client
func (c *Clientset) GatewayOperatorV1alpha1() gatewayoperatorv1alpha1.GatewayOperatorV1alpha1Interface {
	return &fakegatewayoperatorv1alpha1.FakeGatewayOperatorV1alpha1{Fake: &c.Fake}
}

// GatewayOperatorV1beta1 retrieves the GatewayOperatorV1beta1Client
func (c *Clientset) GatewayOperatorV1beta1() gatewayoperatorv1beta1.GatewayOperatorV1beta1Interface {
	return &fakegatewayoperatorv1beta1.FakeGatewayOperatorV1beta1{Fake: &c.Fake}
}

// GatewayOperatorV2beta1 retrieves the GatewayOperatorV2beta1Client
func (c *Clientset) GatewayOperatorV2beta1() gatewayoperatorv2beta1.GatewayOperatorV2beta1Interface {
	return &fakegatewayoperatorv2beta1.FakeGatewayOperatorV2beta1{Fake: &c.Fake}
}

// IncubatorV1alpha1 retrieves the IncubatorV1alpha1Client
func (c *Clientset) IncubatorV1alpha1() incubatorv1alpha1.IncubatorV1alpha1Interface {
	return &fakeincubatorv1alpha1.FakeIncubatorV1alpha1{Fake: &c.Fake}
}

// KonnectV1alpha1 retrieves the KonnectV1alpha1Client
func (c *Clientset) KonnectV1alpha1() konnectv1alpha1.KonnectV1alpha1Interface {
	return &fakekonnectv1alpha1.FakeKonnectV1alpha1{Fake: &c.Fake}
}

// KonnectV1alpha2 retrieves the KonnectV1alpha2Client
func (c *Clientset) KonnectV1alpha2() konnectv1alpha2.KonnectV1alpha2Interface {
	return &fakekonnectv1alpha2.FakeKonnectV1alpha2{Fake: &c.Fake}
}
