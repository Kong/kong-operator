// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sdkmocks

import (
	"context"

	"github.com/Kong/sdk-konnect-go/models/components"
	"github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCACertificatesSDK creates a new instance of MockCACertificatesSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCACertificatesSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCACertificatesSDK {
	mock := &MockCACertificatesSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCACertificatesSDK is an autogenerated mock type for the CACertificatesSDK type
type MockCACertificatesSDK struct {
	mock.Mock
}

type MockCACertificatesSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCACertificatesSDK) EXPECT() *MockCACertificatesSDK_Expecter {
	return &MockCACertificatesSDK_Expecter{mock: &_m.Mock}
}

// CreateCaCertificate provides a mock function for the type MockCACertificatesSDK
func (_mock *MockCACertificatesSDK) CreateCaCertificate(ctx context.Context, controlPlaneID string, caCertificate components.CACertificate, opts ...operations.Option) (*operations.CreateCaCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, caCertificate, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, caCertificate)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateCaCertificate")
	}

	var r0 *operations.CreateCaCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.CACertificate, ...operations.Option) (*operations.CreateCaCertificateResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, caCertificate, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.CACertificate, ...operations.Option) *operations.CreateCaCertificateResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, caCertificate, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateCaCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, components.CACertificate, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, caCertificate, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCACertificatesSDK_CreateCaCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCaCertificate'
type MockCACertificatesSDK_CreateCaCertificate_Call struct {
	*mock.Call
}

// CreateCaCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - caCertificate components.CACertificate
//   - opts ...operations.Option
func (_e *MockCACertificatesSDK_Expecter) CreateCaCertificate(ctx interface{}, controlPlaneID interface{}, caCertificate interface{}, opts ...interface{}) *MockCACertificatesSDK_CreateCaCertificate_Call {
	return &MockCACertificatesSDK_CreateCaCertificate_Call{Call: _e.mock.On("CreateCaCertificate",
		append([]interface{}{ctx, controlPlaneID, caCertificate}, opts...)...)}
}

func (_c *MockCACertificatesSDK_CreateCaCertificate_Call) Run(run func(ctx context.Context, controlPlaneID string, caCertificate components.CACertificate, opts ...operations.Option)) *MockCACertificatesSDK_CreateCaCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 components.CACertificate
		if args[2] != nil {
			arg2 = args[2].(components.CACertificate)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockCACertificatesSDK_CreateCaCertificate_Call) Return(createCaCertificateResponse *operations.CreateCaCertificateResponse, err error) *MockCACertificatesSDK_CreateCaCertificate_Call {
	_c.Call.Return(createCaCertificateResponse, err)
	return _c
}

func (_c *MockCACertificatesSDK_CreateCaCertificate_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, caCertificate components.CACertificate, opts ...operations.Option) (*operations.CreateCaCertificateResponse, error)) *MockCACertificatesSDK_CreateCaCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCaCertificate provides a mock function for the type MockCACertificatesSDK
func (_mock *MockCACertificatesSDK) DeleteCaCertificate(ctx context.Context, controlPlaneID string, caCertificateID string, opts ...operations.Option) (*operations.DeleteCaCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, caCertificateID, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, caCertificateID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteCaCertificate")
	}

	var r0 *operations.DeleteCaCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeleteCaCertificateResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, caCertificateID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteCaCertificateResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, caCertificateID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteCaCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, caCertificateID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCACertificatesSDK_DeleteCaCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCaCertificate'
type MockCACertificatesSDK_DeleteCaCertificate_Call struct {
	*mock.Call
}

// DeleteCaCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - caCertificateID string
//   - opts ...operations.Option
func (_e *MockCACertificatesSDK_Expecter) DeleteCaCertificate(ctx interface{}, controlPlaneID interface{}, caCertificateID interface{}, opts ...interface{}) *MockCACertificatesSDK_DeleteCaCertificate_Call {
	return &MockCACertificatesSDK_DeleteCaCertificate_Call{Call: _e.mock.On("DeleteCaCertificate",
		append([]interface{}{ctx, controlPlaneID, caCertificateID}, opts...)...)}
}

func (_c *MockCACertificatesSDK_DeleteCaCertificate_Call) Run(run func(ctx context.Context, controlPlaneID string, caCertificateID string, opts ...operations.Option)) *MockCACertificatesSDK_DeleteCaCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockCACertificatesSDK_DeleteCaCertificate_Call) Return(deleteCaCertificateResponse *operations.DeleteCaCertificateResponse, err error) *MockCACertificatesSDK_DeleteCaCertificate_Call {
	_c.Call.Return(deleteCaCertificateResponse, err)
	return _c
}

func (_c *MockCACertificatesSDK_DeleteCaCertificate_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, caCertificateID string, opts ...operations.Option) (*operations.DeleteCaCertificateResponse, error)) *MockCACertificatesSDK_DeleteCaCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// GetCaCertificate provides a mock function for the type MockCACertificatesSDK
func (_mock *MockCACertificatesSDK) GetCaCertificate(ctx context.Context, caCertificateID string, controlPlaneID string, opts ...operations.Option) (*operations.GetCaCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, caCertificateID, controlPlaneID, opts)
	} else {
		tmpRet = _mock.Called(ctx, caCertificateID, controlPlaneID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetCaCertificate")
	}

	var r0 *operations.GetCaCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.GetCaCertificateResponse, error)); ok {
		return returnFunc(ctx, caCertificateID, controlPlaneID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.GetCaCertificateResponse); ok {
		r0 = returnFunc(ctx, caCertificateID, controlPlaneID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetCaCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, caCertificateID, controlPlaneID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCACertificatesSDK_GetCaCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCaCertificate'
type MockCACertificatesSDK_GetCaCertificate_Call struct {
	*mock.Call
}

// GetCaCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - caCertificateID string
//   - controlPlaneID string
//   - opts ...operations.Option
func (_e *MockCACertificatesSDK_Expecter) GetCaCertificate(ctx interface{}, caCertificateID interface{}, controlPlaneID interface{}, opts ...interface{}) *MockCACertificatesSDK_GetCaCertificate_Call {
	return &MockCACertificatesSDK_GetCaCertificate_Call{Call: _e.mock.On("GetCaCertificate",
		append([]interface{}{ctx, caCertificateID, controlPlaneID}, opts...)...)}
}

func (_c *MockCACertificatesSDK_GetCaCertificate_Call) Run(run func(ctx context.Context, caCertificateID string, controlPlaneID string, opts ...operations.Option)) *MockCACertificatesSDK_GetCaCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockCACertificatesSDK_GetCaCertificate_Call) Return(getCaCertificateResponse *operations.GetCaCertificateResponse, err error) *MockCACertificatesSDK_GetCaCertificate_Call {
	_c.Call.Return(getCaCertificateResponse, err)
	return _c
}

func (_c *MockCACertificatesSDK_GetCaCertificate_Call) RunAndReturn(run func(ctx context.Context, caCertificateID string, controlPlaneID string, opts ...operations.Option) (*operations.GetCaCertificateResponse, error)) *MockCACertificatesSDK_GetCaCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// ListCaCertificate provides a mock function for the type MockCACertificatesSDK
func (_mock *MockCACertificatesSDK) ListCaCertificate(ctx context.Context, request operations.ListCaCertificateRequest, opts ...operations.Option) (*operations.ListCaCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListCaCertificate")
	}

	var r0 *operations.ListCaCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListCaCertificateRequest, ...operations.Option) (*operations.ListCaCertificateResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListCaCertificateRequest, ...operations.Option) *operations.ListCaCertificateResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListCaCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListCaCertificateRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCACertificatesSDK_ListCaCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCaCertificate'
type MockCACertificatesSDK_ListCaCertificate_Call struct {
	*mock.Call
}

// ListCaCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.ListCaCertificateRequest
//   - opts ...operations.Option
func (_e *MockCACertificatesSDK_Expecter) ListCaCertificate(ctx interface{}, request interface{}, opts ...interface{}) *MockCACertificatesSDK_ListCaCertificate_Call {
	return &MockCACertificatesSDK_ListCaCertificate_Call{Call: _e.mock.On("ListCaCertificate",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockCACertificatesSDK_ListCaCertificate_Call) Run(run func(ctx context.Context, request operations.ListCaCertificateRequest, opts ...operations.Option)) *MockCACertificatesSDK_ListCaCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.ListCaCertificateRequest
		if args[1] != nil {
			arg1 = args[1].(operations.ListCaCertificateRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCACertificatesSDK_ListCaCertificate_Call) Return(listCaCertificateResponse *operations.ListCaCertificateResponse, err error) *MockCACertificatesSDK_ListCaCertificate_Call {
	_c.Call.Return(listCaCertificateResponse, err)
	return _c
}

func (_c *MockCACertificatesSDK_ListCaCertificate_Call) RunAndReturn(run func(ctx context.Context, request operations.ListCaCertificateRequest, opts ...operations.Option) (*operations.ListCaCertificateResponse, error)) *MockCACertificatesSDK_ListCaCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertCaCertificate provides a mock function for the type MockCACertificatesSDK
func (_mock *MockCACertificatesSDK) UpsertCaCertificate(ctx context.Context, request operations.UpsertCaCertificateRequest, opts ...operations.Option) (*operations.UpsertCaCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertCaCertificate")
	}

	var r0 *operations.UpsertCaCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertCaCertificateRequest, ...operations.Option) (*operations.UpsertCaCertificateResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertCaCertificateRequest, ...operations.Option) *operations.UpsertCaCertificateResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertCaCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertCaCertificateRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCACertificatesSDK_UpsertCaCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertCaCertificate'
type MockCACertificatesSDK_UpsertCaCertificate_Call struct {
	*mock.Call
}

// UpsertCaCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.UpsertCaCertificateRequest
//   - opts ...operations.Option
func (_e *MockCACertificatesSDK_Expecter) UpsertCaCertificate(ctx interface{}, request interface{}, opts ...interface{}) *MockCACertificatesSDK_UpsertCaCertificate_Call {
	return &MockCACertificatesSDK_UpsertCaCertificate_Call{Call: _e.mock.On("UpsertCaCertificate",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockCACertificatesSDK_UpsertCaCertificate_Call) Run(run func(ctx context.Context, request operations.UpsertCaCertificateRequest, opts ...operations.Option)) *MockCACertificatesSDK_UpsertCaCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.UpsertCaCertificateRequest
		if args[1] != nil {
			arg1 = args[1].(operations.UpsertCaCertificateRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCACertificatesSDK_UpsertCaCertificate_Call) Return(upsertCaCertificateResponse *operations.UpsertCaCertificateResponse, err error) *MockCACertificatesSDK_UpsertCaCertificate_Call {
	_c.Call.Return(upsertCaCertificateResponse, err)
	return _c
}

func (_c *MockCACertificatesSDK_UpsertCaCertificate_Call) RunAndReturn(run func(ctx context.Context, request operations.UpsertCaCertificateRequest, opts ...operations.Option) (*operations.UpsertCaCertificateResponse, error)) *MockCACertificatesSDK_UpsertCaCertificate_Call {
	_c.Call.Return(run)
	return _c
}
