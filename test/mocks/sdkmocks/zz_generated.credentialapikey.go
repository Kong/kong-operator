// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sdkmocks

import (
	"context"

	"github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// NewMockKongCredentialAPIKeySDK creates a new instance of MockKongCredentialAPIKeySDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKongCredentialAPIKeySDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKongCredentialAPIKeySDK {
	mock := &MockKongCredentialAPIKeySDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKongCredentialAPIKeySDK is an autogenerated mock type for the KongCredentialAPIKeySDK type
type MockKongCredentialAPIKeySDK struct {
	mock.Mock
}

type MockKongCredentialAPIKeySDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKongCredentialAPIKeySDK) EXPECT() *MockKongCredentialAPIKeySDK_Expecter {
	return &MockKongCredentialAPIKeySDK_Expecter{mock: &_m.Mock}
}

// CreateKeyAuthWithConsumer provides a mock function for the type MockKongCredentialAPIKeySDK
func (_mock *MockKongCredentialAPIKeySDK) CreateKeyAuthWithConsumer(ctx context.Context, req operations.CreateKeyAuthWithConsumerRequest, opts ...operations.Option) (*operations.CreateKeyAuthWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, req, opts)
	} else {
		tmpRet = _mock.Called(ctx, req)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateKeyAuthWithConsumer")
	}

	var r0 *operations.CreateKeyAuthWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateKeyAuthWithConsumerRequest, ...operations.Option) (*operations.CreateKeyAuthWithConsumerResponse, error)); ok {
		return returnFunc(ctx, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateKeyAuthWithConsumerRequest, ...operations.Option) *operations.CreateKeyAuthWithConsumerResponse); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateKeyAuthWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.CreateKeyAuthWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateKeyAuthWithConsumer'
type MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call struct {
	*mock.Call
}

// CreateKeyAuthWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - req operations.CreateKeyAuthWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialAPIKeySDK_Expecter) CreateKeyAuthWithConsumer(ctx interface{}, req interface{}, opts ...interface{}) *MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call {
	return &MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call{Call: _e.mock.On("CreateKeyAuthWithConsumer",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call) Run(run func(ctx context.Context, req operations.CreateKeyAuthWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.CreateKeyAuthWithConsumerRequest
		if args[1] != nil {
			arg1 = args[1].(operations.CreateKeyAuthWithConsumerRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call) Return(createKeyAuthWithConsumerResponse *operations.CreateKeyAuthWithConsumerResponse, err error) *MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call {
	_c.Call.Return(createKeyAuthWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call) RunAndReturn(run func(ctx context.Context, req operations.CreateKeyAuthWithConsumerRequest, opts ...operations.Option) (*operations.CreateKeyAuthWithConsumerResponse, error)) *MockKongCredentialAPIKeySDK_CreateKeyAuthWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteKeyAuthWithConsumer provides a mock function for the type MockKongCredentialAPIKeySDK
func (_mock *MockKongCredentialAPIKeySDK) DeleteKeyAuthWithConsumer(ctx context.Context, request operations.DeleteKeyAuthWithConsumerRequest, opts ...operations.Option) (*operations.DeleteKeyAuthWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteKeyAuthWithConsumer")
	}

	var r0 *operations.DeleteKeyAuthWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteKeyAuthWithConsumerRequest, ...operations.Option) (*operations.DeleteKeyAuthWithConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteKeyAuthWithConsumerRequest, ...operations.Option) *operations.DeleteKeyAuthWithConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteKeyAuthWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.DeleteKeyAuthWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteKeyAuthWithConsumer'
type MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call struct {
	*mock.Call
}

// DeleteKeyAuthWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.DeleteKeyAuthWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialAPIKeySDK_Expecter) DeleteKeyAuthWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call {
	return &MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call{Call: _e.mock.On("DeleteKeyAuthWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call) Run(run func(ctx context.Context, request operations.DeleteKeyAuthWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.DeleteKeyAuthWithConsumerRequest
		if args[1] != nil {
			arg1 = args[1].(operations.DeleteKeyAuthWithConsumerRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call) Return(deleteKeyAuthWithConsumerResponse *operations.DeleteKeyAuthWithConsumerResponse, err error) *MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call {
	_c.Call.Return(deleteKeyAuthWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.DeleteKeyAuthWithConsumerRequest, opts ...operations.Option) (*operations.DeleteKeyAuthWithConsumerResponse, error)) *MockKongCredentialAPIKeySDK_DeleteKeyAuthWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// ListKeyAuth provides a mock function for the type MockKongCredentialAPIKeySDK
func (_mock *MockKongCredentialAPIKeySDK) ListKeyAuth(ctx context.Context, request operations.ListKeyAuthRequest, opts ...operations.Option) (*operations.ListKeyAuthResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListKeyAuth")
	}

	var r0 *operations.ListKeyAuthResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListKeyAuthRequest, ...operations.Option) (*operations.ListKeyAuthResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListKeyAuthRequest, ...operations.Option) *operations.ListKeyAuthResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListKeyAuthResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListKeyAuthRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialAPIKeySDK_ListKeyAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListKeyAuth'
type MockKongCredentialAPIKeySDK_ListKeyAuth_Call struct {
	*mock.Call
}

// ListKeyAuth is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.ListKeyAuthRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialAPIKeySDK_Expecter) ListKeyAuth(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialAPIKeySDK_ListKeyAuth_Call {
	return &MockKongCredentialAPIKeySDK_ListKeyAuth_Call{Call: _e.mock.On("ListKeyAuth",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialAPIKeySDK_ListKeyAuth_Call) Run(run func(ctx context.Context, request operations.ListKeyAuthRequest, opts ...operations.Option)) *MockKongCredentialAPIKeySDK_ListKeyAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.ListKeyAuthRequest
		if args[1] != nil {
			arg1 = args[1].(operations.ListKeyAuthRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKongCredentialAPIKeySDK_ListKeyAuth_Call) Return(listKeyAuthResponse *operations.ListKeyAuthResponse, err error) *MockKongCredentialAPIKeySDK_ListKeyAuth_Call {
	_c.Call.Return(listKeyAuthResponse, err)
	return _c
}

func (_c *MockKongCredentialAPIKeySDK_ListKeyAuth_Call) RunAndReturn(run func(ctx context.Context, request operations.ListKeyAuthRequest, opts ...operations.Option) (*operations.ListKeyAuthResponse, error)) *MockKongCredentialAPIKeySDK_ListKeyAuth_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertKeyAuthWithConsumer provides a mock function for the type MockKongCredentialAPIKeySDK
func (_mock *MockKongCredentialAPIKeySDK) UpsertKeyAuthWithConsumer(ctx context.Context, request operations.UpsertKeyAuthWithConsumerRequest, opts ...operations.Option) (*operations.UpsertKeyAuthWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertKeyAuthWithConsumer")
	}

	var r0 *operations.UpsertKeyAuthWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertKeyAuthWithConsumerRequest, ...operations.Option) (*operations.UpsertKeyAuthWithConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertKeyAuthWithConsumerRequest, ...operations.Option) *operations.UpsertKeyAuthWithConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertKeyAuthWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertKeyAuthWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertKeyAuthWithConsumer'
type MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call struct {
	*mock.Call
}

// UpsertKeyAuthWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.UpsertKeyAuthWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialAPIKeySDK_Expecter) UpsertKeyAuthWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call {
	return &MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call{Call: _e.mock.On("UpsertKeyAuthWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call) Run(run func(ctx context.Context, request operations.UpsertKeyAuthWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.UpsertKeyAuthWithConsumerRequest
		if args[1] != nil {
			arg1 = args[1].(operations.UpsertKeyAuthWithConsumerRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call) Return(upsertKeyAuthWithConsumerResponse *operations.UpsertKeyAuthWithConsumerResponse, err error) *MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call {
	_c.Call.Return(upsertKeyAuthWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.UpsertKeyAuthWithConsumerRequest, opts ...operations.Option) (*operations.UpsertKeyAuthWithConsumerResponse, error)) *MockKongCredentialAPIKeySDK_UpsertKeyAuthWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// GetKeyAuthWithConsumer provides a mock function for the type MockKongCredentialAPIKeySDK
func (_mock *MockKongCredentialAPIKeySDK) GetKeyAuthWithConsumer(ctx context.Context, request operations.GetKeyAuthWithConsumerRequest, opts ...operations.Option) (*operations.GetKeyAuthWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetKeyAuthWithConsumer")
	}

	var r0 *operations.GetKeyAuthWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.GetKeyAuthWithConsumerRequest, ...operations.Option) (*operations.GetKeyAuthWithConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.GetKeyAuthWithConsumerRequest, ...operations.Option) *operations.GetKeyAuthWithConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetKeyAuthWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.GetKeyAuthWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialAPIKeySDK_GetKeyAuthWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKeyAuthWithConsumer'
type MockKongCredentialAPIKeySDK_GetKeyAuthWithConsumer_Call struct {
	*mock.Call
}

// GetKeyAuthWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.GetKeyAuthWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialAPIKeySDK_Expecter) GetKeyAuthWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialAPIKeySDK_GetKeyAuthWithConsumer_Call {
	return &MockKongCredentialAPIKeySDK_GetKeyAuthWithConsumer_Call{Call: _e.mock.On("GetKeyAuthWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialAPIKeySDK_GetKeyAuthWithConsumer_Call) Run(run func(ctx context.Context, request operations.GetKeyAuthWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialAPIKeySDK_GetKeyAuthWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.GetKeyAuthWithConsumerRequest
		if args[1] != nil {
			arg1 = args[1].(operations.GetKeyAuthWithConsumerRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKongCredentialAPIKeySDK_GetKeyAuthWithConsumer_Call) Return(getKeyAuthWithConsumerResponse *operations.GetKeyAuthWithConsumerResponse, err error) *MockKongCredentialAPIKeySDK_GetKeyAuthWithConsumer_Call {
	_c.Call.Return(getKeyAuthWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialAPIKeySDK_GetKeyAuthWithConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.GetKeyAuthWithConsumerRequest, opts ...operations.Option) (*operations.GetKeyAuthWithConsumerResponse, error)) *MockKongCredentialAPIKeySDK_GetKeyAuthWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}
