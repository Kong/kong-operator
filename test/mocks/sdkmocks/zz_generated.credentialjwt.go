// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sdkmocks

import (
	"context"

	"github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// NewMockKongCredentialJWTSDK creates a new instance of MockKongCredentialJWTSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKongCredentialJWTSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKongCredentialJWTSDK {
	mock := &MockKongCredentialJWTSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKongCredentialJWTSDK is an autogenerated mock type for the KongCredentialJWTSDK type
type MockKongCredentialJWTSDK struct {
	mock.Mock
}

type MockKongCredentialJWTSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKongCredentialJWTSDK) EXPECT() *MockKongCredentialJWTSDK_Expecter {
	return &MockKongCredentialJWTSDK_Expecter{mock: &_m.Mock}
}

// CreateJwtWithConsumer provides a mock function for the type MockKongCredentialJWTSDK
func (_mock *MockKongCredentialJWTSDK) CreateJwtWithConsumer(ctx context.Context, req operations.CreateJwtWithConsumerRequest, opts ...operations.Option) (*operations.CreateJwtWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, req, opts)
	} else {
		tmpRet = _mock.Called(ctx, req)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateJwtWithConsumer")
	}

	var r0 *operations.CreateJwtWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateJwtWithConsumerRequest, ...operations.Option) (*operations.CreateJwtWithConsumerResponse, error)); ok {
		return returnFunc(ctx, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateJwtWithConsumerRequest, ...operations.Option) *operations.CreateJwtWithConsumerResponse); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateJwtWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.CreateJwtWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJwtWithConsumer'
type MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call struct {
	*mock.Call
}

// CreateJwtWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - req operations.CreateJwtWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialJWTSDK_Expecter) CreateJwtWithConsumer(ctx interface{}, req interface{}, opts ...interface{}) *MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call {
	return &MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call{Call: _e.mock.On("CreateJwtWithConsumer",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call) Run(run func(ctx context.Context, req operations.CreateJwtWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.CreateJwtWithConsumerRequest
		if args[1] != nil {
			arg1 = args[1].(operations.CreateJwtWithConsumerRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call) Return(createJwtWithConsumerResponse *operations.CreateJwtWithConsumerResponse, err error) *MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call {
	_c.Call.Return(createJwtWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call) RunAndReturn(run func(ctx context.Context, req operations.CreateJwtWithConsumerRequest, opts ...operations.Option) (*operations.CreateJwtWithConsumerResponse, error)) *MockKongCredentialJWTSDK_CreateJwtWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteJwtWithConsumer provides a mock function for the type MockKongCredentialJWTSDK
func (_mock *MockKongCredentialJWTSDK) DeleteJwtWithConsumer(ctx context.Context, request operations.DeleteJwtWithConsumerRequest, opts ...operations.Option) (*operations.DeleteJwtWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteJwtWithConsumer")
	}

	var r0 *operations.DeleteJwtWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteJwtWithConsumerRequest, ...operations.Option) (*operations.DeleteJwtWithConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteJwtWithConsumerRequest, ...operations.Option) *operations.DeleteJwtWithConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteJwtWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.DeleteJwtWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteJwtWithConsumer'
type MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call struct {
	*mock.Call
}

// DeleteJwtWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.DeleteJwtWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialJWTSDK_Expecter) DeleteJwtWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call {
	return &MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call{Call: _e.mock.On("DeleteJwtWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call) Run(run func(ctx context.Context, request operations.DeleteJwtWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.DeleteJwtWithConsumerRequest
		if args[1] != nil {
			arg1 = args[1].(operations.DeleteJwtWithConsumerRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call) Return(deleteJwtWithConsumerResponse *operations.DeleteJwtWithConsumerResponse, err error) *MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call {
	_c.Call.Return(deleteJwtWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.DeleteJwtWithConsumerRequest, opts ...operations.Option) (*operations.DeleteJwtWithConsumerResponse, error)) *MockKongCredentialJWTSDK_DeleteJwtWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// GetJwtWithConsumer provides a mock function for the type MockKongCredentialJWTSDK
func (_mock *MockKongCredentialJWTSDK) GetJwtWithConsumer(ctx context.Context, request operations.GetJwtWithConsumerRequest, opts ...operations.Option) (*operations.GetJwtWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetJwtWithConsumer")
	}

	var r0 *operations.GetJwtWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.GetJwtWithConsumerRequest, ...operations.Option) (*operations.GetJwtWithConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.GetJwtWithConsumerRequest, ...operations.Option) *operations.GetJwtWithConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetJwtWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.GetJwtWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialJWTSDK_GetJwtWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJwtWithConsumer'
type MockKongCredentialJWTSDK_GetJwtWithConsumer_Call struct {
	*mock.Call
}

// GetJwtWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.GetJwtWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialJWTSDK_Expecter) GetJwtWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialJWTSDK_GetJwtWithConsumer_Call {
	return &MockKongCredentialJWTSDK_GetJwtWithConsumer_Call{Call: _e.mock.On("GetJwtWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialJWTSDK_GetJwtWithConsumer_Call) Run(run func(ctx context.Context, request operations.GetJwtWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialJWTSDK_GetJwtWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.GetJwtWithConsumerRequest
		if args[1] != nil {
			arg1 = args[1].(operations.GetJwtWithConsumerRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKongCredentialJWTSDK_GetJwtWithConsumer_Call) Return(getJwtWithConsumerResponse *operations.GetJwtWithConsumerResponse, err error) *MockKongCredentialJWTSDK_GetJwtWithConsumer_Call {
	_c.Call.Return(getJwtWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialJWTSDK_GetJwtWithConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.GetJwtWithConsumerRequest, opts ...operations.Option) (*operations.GetJwtWithConsumerResponse, error)) *MockKongCredentialJWTSDK_GetJwtWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// ListJwt provides a mock function for the type MockKongCredentialJWTSDK
func (_mock *MockKongCredentialJWTSDK) ListJwt(ctx context.Context, request operations.ListJwtRequest, opts ...operations.Option) (*operations.ListJwtResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListJwt")
	}

	var r0 *operations.ListJwtResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListJwtRequest, ...operations.Option) (*operations.ListJwtResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListJwtRequest, ...operations.Option) *operations.ListJwtResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListJwtResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListJwtRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialJWTSDK_ListJwt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListJwt'
type MockKongCredentialJWTSDK_ListJwt_Call struct {
	*mock.Call
}

// ListJwt is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.ListJwtRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialJWTSDK_Expecter) ListJwt(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialJWTSDK_ListJwt_Call {
	return &MockKongCredentialJWTSDK_ListJwt_Call{Call: _e.mock.On("ListJwt",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialJWTSDK_ListJwt_Call) Run(run func(ctx context.Context, request operations.ListJwtRequest, opts ...operations.Option)) *MockKongCredentialJWTSDK_ListJwt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.ListJwtRequest
		if args[1] != nil {
			arg1 = args[1].(operations.ListJwtRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKongCredentialJWTSDK_ListJwt_Call) Return(listJwtResponse *operations.ListJwtResponse, err error) *MockKongCredentialJWTSDK_ListJwt_Call {
	_c.Call.Return(listJwtResponse, err)
	return _c
}

func (_c *MockKongCredentialJWTSDK_ListJwt_Call) RunAndReturn(run func(ctx context.Context, request operations.ListJwtRequest, opts ...operations.Option) (*operations.ListJwtResponse, error)) *MockKongCredentialJWTSDK_ListJwt_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertJwtWithConsumer provides a mock function for the type MockKongCredentialJWTSDK
func (_mock *MockKongCredentialJWTSDK) UpsertJwtWithConsumer(ctx context.Context, request operations.UpsertJwtWithConsumerRequest, opts ...operations.Option) (*operations.UpsertJwtWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertJwtWithConsumer")
	}

	var r0 *operations.UpsertJwtWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertJwtWithConsumerRequest, ...operations.Option) (*operations.UpsertJwtWithConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertJwtWithConsumerRequest, ...operations.Option) *operations.UpsertJwtWithConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertJwtWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertJwtWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertJwtWithConsumer'
type MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call struct {
	*mock.Call
}

// UpsertJwtWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.UpsertJwtWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialJWTSDK_Expecter) UpsertJwtWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call {
	return &MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call{Call: _e.mock.On("UpsertJwtWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call) Run(run func(ctx context.Context, request operations.UpsertJwtWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.UpsertJwtWithConsumerRequest
		if args[1] != nil {
			arg1 = args[1].(operations.UpsertJwtWithConsumerRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call) Return(upsertJwtWithConsumerResponse *operations.UpsertJwtWithConsumerResponse, err error) *MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call {
	_c.Call.Return(upsertJwtWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.UpsertJwtWithConsumerRequest, opts ...operations.Option) (*operations.UpsertJwtWithConsumerResponse, error)) *MockKongCredentialJWTSDK_UpsertJwtWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}
