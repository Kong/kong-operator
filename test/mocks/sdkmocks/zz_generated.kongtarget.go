// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sdkmocks

import (
	"context"

	"github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTargetsSDK creates a new instance of MockTargetsSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTargetsSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTargetsSDK {
	mock := &MockTargetsSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTargetsSDK is an autogenerated mock type for the TargetsSDK type
type MockTargetsSDK struct {
	mock.Mock
}

type MockTargetsSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTargetsSDK) EXPECT() *MockTargetsSDK_Expecter {
	return &MockTargetsSDK_Expecter{mock: &_m.Mock}
}

// CreateTargetWithUpstream provides a mock function for the type MockTargetsSDK
func (_mock *MockTargetsSDK) CreateTargetWithUpstream(ctx context.Context, req operations.CreateTargetWithUpstreamRequest, opts ...operations.Option) (*operations.CreateTargetWithUpstreamResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, req, opts)
	} else {
		tmpRet = _mock.Called(ctx, req)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateTargetWithUpstream")
	}

	var r0 *operations.CreateTargetWithUpstreamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateTargetWithUpstreamRequest, ...operations.Option) (*operations.CreateTargetWithUpstreamResponse, error)); ok {
		return returnFunc(ctx, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateTargetWithUpstreamRequest, ...operations.Option) *operations.CreateTargetWithUpstreamResponse); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateTargetWithUpstreamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.CreateTargetWithUpstreamRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTargetsSDK_CreateTargetWithUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTargetWithUpstream'
type MockTargetsSDK_CreateTargetWithUpstream_Call struct {
	*mock.Call
}

// CreateTargetWithUpstream is a helper method to define mock.On call
//   - ctx context.Context
//   - req operations.CreateTargetWithUpstreamRequest
//   - opts ...operations.Option
func (_e *MockTargetsSDK_Expecter) CreateTargetWithUpstream(ctx interface{}, req interface{}, opts ...interface{}) *MockTargetsSDK_CreateTargetWithUpstream_Call {
	return &MockTargetsSDK_CreateTargetWithUpstream_Call{Call: _e.mock.On("CreateTargetWithUpstream",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockTargetsSDK_CreateTargetWithUpstream_Call) Run(run func(ctx context.Context, req operations.CreateTargetWithUpstreamRequest, opts ...operations.Option)) *MockTargetsSDK_CreateTargetWithUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.CreateTargetWithUpstreamRequest
		if args[1] != nil {
			arg1 = args[1].(operations.CreateTargetWithUpstreamRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockTargetsSDK_CreateTargetWithUpstream_Call) Return(createTargetWithUpstreamResponse *operations.CreateTargetWithUpstreamResponse, err error) *MockTargetsSDK_CreateTargetWithUpstream_Call {
	_c.Call.Return(createTargetWithUpstreamResponse, err)
	return _c
}

func (_c *MockTargetsSDK_CreateTargetWithUpstream_Call) RunAndReturn(run func(ctx context.Context, req operations.CreateTargetWithUpstreamRequest, opts ...operations.Option) (*operations.CreateTargetWithUpstreamResponse, error)) *MockTargetsSDK_CreateTargetWithUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTargetWithUpstream provides a mock function for the type MockTargetsSDK
func (_mock *MockTargetsSDK) DeleteTargetWithUpstream(ctx context.Context, req operations.DeleteTargetWithUpstreamRequest, opts ...operations.Option) (*operations.DeleteTargetWithUpstreamResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, req, opts)
	} else {
		tmpRet = _mock.Called(ctx, req)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteTargetWithUpstream")
	}

	var r0 *operations.DeleteTargetWithUpstreamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteTargetWithUpstreamRequest, ...operations.Option) (*operations.DeleteTargetWithUpstreamResponse, error)); ok {
		return returnFunc(ctx, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteTargetWithUpstreamRequest, ...operations.Option) *operations.DeleteTargetWithUpstreamResponse); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteTargetWithUpstreamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.DeleteTargetWithUpstreamRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTargetsSDK_DeleteTargetWithUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTargetWithUpstream'
type MockTargetsSDK_DeleteTargetWithUpstream_Call struct {
	*mock.Call
}

// DeleteTargetWithUpstream is a helper method to define mock.On call
//   - ctx context.Context
//   - req operations.DeleteTargetWithUpstreamRequest
//   - opts ...operations.Option
func (_e *MockTargetsSDK_Expecter) DeleteTargetWithUpstream(ctx interface{}, req interface{}, opts ...interface{}) *MockTargetsSDK_DeleteTargetWithUpstream_Call {
	return &MockTargetsSDK_DeleteTargetWithUpstream_Call{Call: _e.mock.On("DeleteTargetWithUpstream",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockTargetsSDK_DeleteTargetWithUpstream_Call) Run(run func(ctx context.Context, req operations.DeleteTargetWithUpstreamRequest, opts ...operations.Option)) *MockTargetsSDK_DeleteTargetWithUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.DeleteTargetWithUpstreamRequest
		if args[1] != nil {
			arg1 = args[1].(operations.DeleteTargetWithUpstreamRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockTargetsSDK_DeleteTargetWithUpstream_Call) Return(deleteTargetWithUpstreamResponse *operations.DeleteTargetWithUpstreamResponse, err error) *MockTargetsSDK_DeleteTargetWithUpstream_Call {
	_c.Call.Return(deleteTargetWithUpstreamResponse, err)
	return _c
}

func (_c *MockTargetsSDK_DeleteTargetWithUpstream_Call) RunAndReturn(run func(ctx context.Context, req operations.DeleteTargetWithUpstreamRequest, opts ...operations.Option) (*operations.DeleteTargetWithUpstreamResponse, error)) *MockTargetsSDK_DeleteTargetWithUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// GetTargetWithUpstream provides a mock function for the type MockTargetsSDK
func (_mock *MockTargetsSDK) GetTargetWithUpstream(ctx context.Context, req operations.GetTargetWithUpstreamRequest, opts ...operations.Option) (*operations.GetTargetWithUpstreamResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, req, opts)
	} else {
		tmpRet = _mock.Called(ctx, req)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTargetWithUpstream")
	}

	var r0 *operations.GetTargetWithUpstreamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.GetTargetWithUpstreamRequest, ...operations.Option) (*operations.GetTargetWithUpstreamResponse, error)); ok {
		return returnFunc(ctx, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.GetTargetWithUpstreamRequest, ...operations.Option) *operations.GetTargetWithUpstreamResponse); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetTargetWithUpstreamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.GetTargetWithUpstreamRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTargetsSDK_GetTargetWithUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTargetWithUpstream'
type MockTargetsSDK_GetTargetWithUpstream_Call struct {
	*mock.Call
}

// GetTargetWithUpstream is a helper method to define mock.On call
//   - ctx context.Context
//   - req operations.GetTargetWithUpstreamRequest
//   - opts ...operations.Option
func (_e *MockTargetsSDK_Expecter) GetTargetWithUpstream(ctx interface{}, req interface{}, opts ...interface{}) *MockTargetsSDK_GetTargetWithUpstream_Call {
	return &MockTargetsSDK_GetTargetWithUpstream_Call{Call: _e.mock.On("GetTargetWithUpstream",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockTargetsSDK_GetTargetWithUpstream_Call) Run(run func(ctx context.Context, req operations.GetTargetWithUpstreamRequest, opts ...operations.Option)) *MockTargetsSDK_GetTargetWithUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.GetTargetWithUpstreamRequest
		if args[1] != nil {
			arg1 = args[1].(operations.GetTargetWithUpstreamRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockTargetsSDK_GetTargetWithUpstream_Call) Return(getTargetWithUpstreamResponse *operations.GetTargetWithUpstreamResponse, err error) *MockTargetsSDK_GetTargetWithUpstream_Call {
	_c.Call.Return(getTargetWithUpstreamResponse, err)
	return _c
}

func (_c *MockTargetsSDK_GetTargetWithUpstream_Call) RunAndReturn(run func(ctx context.Context, req operations.GetTargetWithUpstreamRequest, opts ...operations.Option) (*operations.GetTargetWithUpstreamResponse, error)) *MockTargetsSDK_GetTargetWithUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// ListTargetWithUpstream provides a mock function for the type MockTargetsSDK
func (_mock *MockTargetsSDK) ListTargetWithUpstream(ctx context.Context, request operations.ListTargetWithUpstreamRequest, opts ...operations.Option) (*operations.ListTargetWithUpstreamResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListTargetWithUpstream")
	}

	var r0 *operations.ListTargetWithUpstreamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListTargetWithUpstreamRequest, ...operations.Option) (*operations.ListTargetWithUpstreamResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListTargetWithUpstreamRequest, ...operations.Option) *operations.ListTargetWithUpstreamResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListTargetWithUpstreamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListTargetWithUpstreamRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTargetsSDK_ListTargetWithUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTargetWithUpstream'
type MockTargetsSDK_ListTargetWithUpstream_Call struct {
	*mock.Call
}

// ListTargetWithUpstream is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.ListTargetWithUpstreamRequest
//   - opts ...operations.Option
func (_e *MockTargetsSDK_Expecter) ListTargetWithUpstream(ctx interface{}, request interface{}, opts ...interface{}) *MockTargetsSDK_ListTargetWithUpstream_Call {
	return &MockTargetsSDK_ListTargetWithUpstream_Call{Call: _e.mock.On("ListTargetWithUpstream",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockTargetsSDK_ListTargetWithUpstream_Call) Run(run func(ctx context.Context, request operations.ListTargetWithUpstreamRequest, opts ...operations.Option)) *MockTargetsSDK_ListTargetWithUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.ListTargetWithUpstreamRequest
		if args[1] != nil {
			arg1 = args[1].(operations.ListTargetWithUpstreamRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockTargetsSDK_ListTargetWithUpstream_Call) Return(listTargetWithUpstreamResponse *operations.ListTargetWithUpstreamResponse, err error) *MockTargetsSDK_ListTargetWithUpstream_Call {
	_c.Call.Return(listTargetWithUpstreamResponse, err)
	return _c
}

func (_c *MockTargetsSDK_ListTargetWithUpstream_Call) RunAndReturn(run func(ctx context.Context, request operations.ListTargetWithUpstreamRequest, opts ...operations.Option) (*operations.ListTargetWithUpstreamResponse, error)) *MockTargetsSDK_ListTargetWithUpstream_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertTargetWithUpstream provides a mock function for the type MockTargetsSDK
func (_mock *MockTargetsSDK) UpsertTargetWithUpstream(ctx context.Context, req operations.UpsertTargetWithUpstreamRequest, opts ...operations.Option) (*operations.UpsertTargetWithUpstreamResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, req, opts)
	} else {
		tmpRet = _mock.Called(ctx, req)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertTargetWithUpstream")
	}

	var r0 *operations.UpsertTargetWithUpstreamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertTargetWithUpstreamRequest, ...operations.Option) (*operations.UpsertTargetWithUpstreamResponse, error)); ok {
		return returnFunc(ctx, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertTargetWithUpstreamRequest, ...operations.Option) *operations.UpsertTargetWithUpstreamResponse); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertTargetWithUpstreamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertTargetWithUpstreamRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTargetsSDK_UpsertTargetWithUpstream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertTargetWithUpstream'
type MockTargetsSDK_UpsertTargetWithUpstream_Call struct {
	*mock.Call
}

// UpsertTargetWithUpstream is a helper method to define mock.On call
//   - ctx context.Context
//   - req operations.UpsertTargetWithUpstreamRequest
//   - opts ...operations.Option
func (_e *MockTargetsSDK_Expecter) UpsertTargetWithUpstream(ctx interface{}, req interface{}, opts ...interface{}) *MockTargetsSDK_UpsertTargetWithUpstream_Call {
	return &MockTargetsSDK_UpsertTargetWithUpstream_Call{Call: _e.mock.On("UpsertTargetWithUpstream",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockTargetsSDK_UpsertTargetWithUpstream_Call) Run(run func(ctx context.Context, req operations.UpsertTargetWithUpstreamRequest, opts ...operations.Option)) *MockTargetsSDK_UpsertTargetWithUpstream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.UpsertTargetWithUpstreamRequest
		if args[1] != nil {
			arg1 = args[1].(operations.UpsertTargetWithUpstreamRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockTargetsSDK_UpsertTargetWithUpstream_Call) Return(upsertTargetWithUpstreamResponse *operations.UpsertTargetWithUpstreamResponse, err error) *MockTargetsSDK_UpsertTargetWithUpstream_Call {
	_c.Call.Return(upsertTargetWithUpstreamResponse, err)
	return _c
}

func (_c *MockTargetsSDK_UpsertTargetWithUpstream_Call) RunAndReturn(run func(ctx context.Context, req operations.UpsertTargetWithUpstreamRequest, opts ...operations.Option) (*operations.UpsertTargetWithUpstreamResponse, error)) *MockTargetsSDK_UpsertTargetWithUpstream_Call {
	_c.Call.Return(run)
	return _c
}
