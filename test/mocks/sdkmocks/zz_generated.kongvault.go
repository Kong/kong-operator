// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sdkmocks

import (
	"context"

	"github.com/Kong/sdk-konnect-go/models/components"
	"github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// NewMockVaultSDK creates a new instance of MockVaultSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVaultSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVaultSDK {
	mock := &MockVaultSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVaultSDK is an autogenerated mock type for the VaultSDK type
type MockVaultSDK struct {
	mock.Mock
}

type MockVaultSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVaultSDK) EXPECT() *MockVaultSDK_Expecter {
	return &MockVaultSDK_Expecter{mock: &_m.Mock}
}

// CreateVault provides a mock function for the type MockVaultSDK
func (_mock *MockVaultSDK) CreateVault(ctx context.Context, controlPlaneID string, vault components.Vault, opts ...operations.Option) (*operations.CreateVaultResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, vault, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, vault)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateVault")
	}

	var r0 *operations.CreateVaultResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Vault, ...operations.Option) (*operations.CreateVaultResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, vault, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Vault, ...operations.Option) *operations.CreateVaultResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, vault, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateVaultResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, components.Vault, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, vault, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVaultSDK_CreateVault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVault'
type MockVaultSDK_CreateVault_Call struct {
	*mock.Call
}

// CreateVault is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - vault components.Vault
//   - opts ...operations.Option
func (_e *MockVaultSDK_Expecter) CreateVault(ctx interface{}, controlPlaneID interface{}, vault interface{}, opts ...interface{}) *MockVaultSDK_CreateVault_Call {
	return &MockVaultSDK_CreateVault_Call{Call: _e.mock.On("CreateVault",
		append([]interface{}{ctx, controlPlaneID, vault}, opts...)...)}
}

func (_c *MockVaultSDK_CreateVault_Call) Run(run func(ctx context.Context, controlPlaneID string, vault components.Vault, opts ...operations.Option)) *MockVaultSDK_CreateVault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 components.Vault
		if args[2] != nil {
			arg2 = args[2].(components.Vault)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockVaultSDK_CreateVault_Call) Return(createVaultResponse *operations.CreateVaultResponse, err error) *MockVaultSDK_CreateVault_Call {
	_c.Call.Return(createVaultResponse, err)
	return _c
}

func (_c *MockVaultSDK_CreateVault_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, vault components.Vault, opts ...operations.Option) (*operations.CreateVaultResponse, error)) *MockVaultSDK_CreateVault_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVault provides a mock function for the type MockVaultSDK
func (_mock *MockVaultSDK) DeleteVault(ctx context.Context, controlPlaneID string, vaultID string, opts ...operations.Option) (*operations.DeleteVaultResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, vaultID, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, vaultID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteVault")
	}

	var r0 *operations.DeleteVaultResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeleteVaultResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, vaultID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteVaultResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, vaultID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteVaultResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, vaultID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVaultSDK_DeleteVault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVault'
type MockVaultSDK_DeleteVault_Call struct {
	*mock.Call
}

// DeleteVault is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - vaultID string
//   - opts ...operations.Option
func (_e *MockVaultSDK_Expecter) DeleteVault(ctx interface{}, controlPlaneID interface{}, vaultID interface{}, opts ...interface{}) *MockVaultSDK_DeleteVault_Call {
	return &MockVaultSDK_DeleteVault_Call{Call: _e.mock.On("DeleteVault",
		append([]interface{}{ctx, controlPlaneID, vaultID}, opts...)...)}
}

func (_c *MockVaultSDK_DeleteVault_Call) Run(run func(ctx context.Context, controlPlaneID string, vaultID string, opts ...operations.Option)) *MockVaultSDK_DeleteVault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockVaultSDK_DeleteVault_Call) Return(deleteVaultResponse *operations.DeleteVaultResponse, err error) *MockVaultSDK_DeleteVault_Call {
	_c.Call.Return(deleteVaultResponse, err)
	return _c
}

func (_c *MockVaultSDK_DeleteVault_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, vaultID string, opts ...operations.Option) (*operations.DeleteVaultResponse, error)) *MockVaultSDK_DeleteVault_Call {
	_c.Call.Return(run)
	return _c
}

// GetVault provides a mock function for the type MockVaultSDK
func (_mock *MockVaultSDK) GetVault(ctx context.Context, vaultID string, controlPlaneID string, opts ...operations.Option) (*operations.GetVaultResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, vaultID, controlPlaneID, opts)
	} else {
		tmpRet = _mock.Called(ctx, vaultID, controlPlaneID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetVault")
	}

	var r0 *operations.GetVaultResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.GetVaultResponse, error)); ok {
		return returnFunc(ctx, vaultID, controlPlaneID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.GetVaultResponse); ok {
		r0 = returnFunc(ctx, vaultID, controlPlaneID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetVaultResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, vaultID, controlPlaneID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVaultSDK_GetVault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVault'
type MockVaultSDK_GetVault_Call struct {
	*mock.Call
}

// GetVault is a helper method to define mock.On call
//   - ctx context.Context
//   - vaultID string
//   - controlPlaneID string
//   - opts ...operations.Option
func (_e *MockVaultSDK_Expecter) GetVault(ctx interface{}, vaultID interface{}, controlPlaneID interface{}, opts ...interface{}) *MockVaultSDK_GetVault_Call {
	return &MockVaultSDK_GetVault_Call{Call: _e.mock.On("GetVault",
		append([]interface{}{ctx, vaultID, controlPlaneID}, opts...)...)}
}

func (_c *MockVaultSDK_GetVault_Call) Run(run func(ctx context.Context, vaultID string, controlPlaneID string, opts ...operations.Option)) *MockVaultSDK_GetVault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockVaultSDK_GetVault_Call) Return(getVaultResponse *operations.GetVaultResponse, err error) *MockVaultSDK_GetVault_Call {
	_c.Call.Return(getVaultResponse, err)
	return _c
}

func (_c *MockVaultSDK_GetVault_Call) RunAndReturn(run func(ctx context.Context, vaultID string, controlPlaneID string, opts ...operations.Option) (*operations.GetVaultResponse, error)) *MockVaultSDK_GetVault_Call {
	_c.Call.Return(run)
	return _c
}

// ListVault provides a mock function for the type MockVaultSDK
func (_mock *MockVaultSDK) ListVault(ctx context.Context, request operations.ListVaultRequest, opts ...operations.Option) (*operations.ListVaultResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListVault")
	}

	var r0 *operations.ListVaultResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListVaultRequest, ...operations.Option) (*operations.ListVaultResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListVaultRequest, ...operations.Option) *operations.ListVaultResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListVaultResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListVaultRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVaultSDK_ListVault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVault'
type MockVaultSDK_ListVault_Call struct {
	*mock.Call
}

// ListVault is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.ListVaultRequest
//   - opts ...operations.Option
func (_e *MockVaultSDK_Expecter) ListVault(ctx interface{}, request interface{}, opts ...interface{}) *MockVaultSDK_ListVault_Call {
	return &MockVaultSDK_ListVault_Call{Call: _e.mock.On("ListVault",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockVaultSDK_ListVault_Call) Run(run func(ctx context.Context, request operations.ListVaultRequest, opts ...operations.Option)) *MockVaultSDK_ListVault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.ListVaultRequest
		if args[1] != nil {
			arg1 = args[1].(operations.ListVaultRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockVaultSDK_ListVault_Call) Return(listVaultResponse *operations.ListVaultResponse, err error) *MockVaultSDK_ListVault_Call {
	_c.Call.Return(listVaultResponse, err)
	return _c
}

func (_c *MockVaultSDK_ListVault_Call) RunAndReturn(run func(ctx context.Context, request operations.ListVaultRequest, opts ...operations.Option) (*operations.ListVaultResponse, error)) *MockVaultSDK_ListVault_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertVault provides a mock function for the type MockVaultSDK
func (_mock *MockVaultSDK) UpsertVault(ctx context.Context, request operations.UpsertVaultRequest, opts ...operations.Option) (*operations.UpsertVaultResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertVault")
	}

	var r0 *operations.UpsertVaultResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertVaultRequest, ...operations.Option) (*operations.UpsertVaultResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertVaultRequest, ...operations.Option) *operations.UpsertVaultResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertVaultResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertVaultRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVaultSDK_UpsertVault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertVault'
type MockVaultSDK_UpsertVault_Call struct {
	*mock.Call
}

// UpsertVault is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.UpsertVaultRequest
//   - opts ...operations.Option
func (_e *MockVaultSDK_Expecter) UpsertVault(ctx interface{}, request interface{}, opts ...interface{}) *MockVaultSDK_UpsertVault_Call {
	return &MockVaultSDK_UpsertVault_Call{Call: _e.mock.On("UpsertVault",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockVaultSDK_UpsertVault_Call) Run(run func(ctx context.Context, request operations.UpsertVaultRequest, opts ...operations.Option)) *MockVaultSDK_UpsertVault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.UpsertVaultRequest
		if args[1] != nil {
			arg1 = args[1].(operations.UpsertVaultRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockVaultSDK_UpsertVault_Call) Return(upsertVaultResponse *operations.UpsertVaultResponse, err error) *MockVaultSDK_UpsertVault_Call {
	_c.Call.Return(upsertVaultResponse, err)
	return _c
}

func (_c *MockVaultSDK_UpsertVault_Call) RunAndReturn(run func(ctx context.Context, request operations.UpsertVaultRequest, opts ...operations.Option) (*operations.UpsertVaultResponse, error)) *MockVaultSDK_UpsertVault_Call {
	_c.Call.Return(run)
	return _c
}
