package main

import (
	"bytes"
	"context"
	"fmt"
	"os"
	"os/exec"
	"regexp"
)

// Generates CRDs for Helm Chart charts/kong-operator/templates/validating-webhook.yaml.
func main() {
	const autoGenerationComment = "# This file is auto-generated by KO's hack/generators/validating-webhook/main.go generator.\n"

	const chartCRDsFilePath = "charts/kong-operator/templates/validating-webhook.yaml"
	fmt.Println("Generating", chartCRDsFilePath)
	KUSTOMIZE_BIN := os.Getenv("KUSTOMIZE_BIN")
	if KUSTOMIZE_BIN == "" {
		fmt.Println("KUSTOMIZE_BIN environment variable is not set")
		os.Exit(1)
	}
	fmt.Println("KUSTOMIZE_BIN is set to:", KUSTOMIZE_BIN)

	ctx := context.Background()
	cmd := exec.CommandContext(ctx, KUSTOMIZE_BIN, "build", "config/default/validating_webhook/")
	var out bytes.Buffer
	cmd.Stdout = &out
	if err := cmd.Run(); err != nil {
		fmt.Printf("Failed to execute %s: %v\n", cmd.String(), err)
		os.Exit(1)
	}
	crdContent := out.String()

	crdContent = wrapInIfEnabled(crdContent)
	crdContent = templateNamespace(crdContent)
	crdContent = templateLabels(crdContent)
	crdContent = templateInjectCAAnnotation(crdContent)

	var fileCRDs *os.File
	fileCRDs, err := os.Create(chartCRDsFilePath)
	if err != nil {
		fmt.Printf("Failed to create %s: %v\n", chartCRDsFilePath, err)
		os.Exit(1)
	}
	defer fileCRDs.Close()

	for _, content := range []string{autoGenerationComment, crdContent} {
		if _, err := fileCRDs.WriteString(content); err != nil {
			fmt.Printf("Failed to write to %s: %v\n", chartCRDsFilePath, err)
			os.Exit(1)
		}
	}
	fmt.Println("Successfully finished")
}

func wrapInIfEnabled(v string) string {
	// NOTE: This values.yaml field path must match the one in
	// https://github.com/Kong/kong-operator/blob/f981b357ff58dd71ff2f5eac1330f3f1693d2734/charts/kong-operator/values.yaml#L140
	return fmt.Sprintf("{{- if .Values.global.webhooks.validating.enabled }}\n%s\n{{- end }}\n", v)
}

func templateNamespace(yaml string) string {
	// Regex to match the clientConfig.service block
	re := regexp.MustCompile(`(?ms)clientConfig:\s*service:.*?port:\s*(\d+)`)

	// Replacement with Helm template
	replacement := `clientConfig:
    service:
      name: {{ template "kong.webhookServiceName" . }}
      namespace: {{ template "kong.namespace" . }}
      port: $1`

	// Perform replacement
	return re.ReplaceAllString(yaml, replacement)
}

func templateLabels(yaml string) string {
	// Regex matches "labels:" followed by indented lines
	// - labels:\s* matches the key
	// - (?:\n\s+.*)* matches any number of following indented lines
	re := regexp.MustCompile(`(?m)labels:\s*(?:\n\s+.*)*`)

	// Replacement: inject Helm template
	replacement := `labels:
    {{- include "kong.metaLabels" . | nindent 4 }}
    `

	// Perform replacement
	return re.ReplaceAllString(yaml, replacement)
}

func templateInjectCAAnnotation(yaml string) string {
	// Regex to match the specific annotation line
	re := regexp.MustCompile(`(?m)^(\s*)cert-manager\.io/inject-ca-from:\s*[\w-]+/[\w-]+`)

	// Replacement with Helm template
	replacement := `${1}cert-manager.io/inject-ca-from: {{ template "kong.namespace" . }}/{{ template "kong.webhookServiceName" . }}-serving-cert`

	return re.ReplaceAllString(yaml, replacement)
}
