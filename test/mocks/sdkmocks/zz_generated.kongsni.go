// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sdkmocks

import (
	"context"

	"github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSNIsSDK creates a new instance of MockSNIsSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSNIsSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSNIsSDK {
	mock := &MockSNIsSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSNIsSDK is an autogenerated mock type for the SNIsSDK type
type MockSNIsSDK struct {
	mock.Mock
}

type MockSNIsSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSNIsSDK) EXPECT() *MockSNIsSDK_Expecter {
	return &MockSNIsSDK_Expecter{mock: &_m.Mock}
}

// CreateSniWithCertificate provides a mock function for the type MockSNIsSDK
func (_mock *MockSNIsSDK) CreateSniWithCertificate(context1 context.Context, createSniWithCertificateRequest operations.CreateSniWithCertificateRequest, options ...operations.Option) (*operations.CreateSniWithCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(context1, createSniWithCertificateRequest, options)
	} else {
		tmpRet = _mock.Called(context1, createSniWithCertificateRequest)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateSniWithCertificate")
	}

	var r0 *operations.CreateSniWithCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateSniWithCertificateRequest, ...operations.Option) (*operations.CreateSniWithCertificateResponse, error)); ok {
		return returnFunc(context1, createSniWithCertificateRequest, options...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateSniWithCertificateRequest, ...operations.Option) *operations.CreateSniWithCertificateResponse); ok {
		r0 = returnFunc(context1, createSniWithCertificateRequest, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateSniWithCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.CreateSniWithCertificateRequest, ...operations.Option) error); ok {
		r1 = returnFunc(context1, createSniWithCertificateRequest, options...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSNIsSDK_CreateSniWithCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSniWithCertificate'
type MockSNIsSDK_CreateSniWithCertificate_Call struct {
	*mock.Call
}

// CreateSniWithCertificate is a helper method to define mock.On call
//   - context1 context.Context
//   - createSniWithCertificateRequest operations.CreateSniWithCertificateRequest
//   - options ...operations.Option
func (_e *MockSNIsSDK_Expecter) CreateSniWithCertificate(context1 interface{}, createSniWithCertificateRequest interface{}, options ...interface{}) *MockSNIsSDK_CreateSniWithCertificate_Call {
	return &MockSNIsSDK_CreateSniWithCertificate_Call{Call: _e.mock.On("CreateSniWithCertificate",
		append([]interface{}{context1, createSniWithCertificateRequest}, options...)...)}
}

func (_c *MockSNIsSDK_CreateSniWithCertificate_Call) Run(run func(context1 context.Context, createSniWithCertificateRequest operations.CreateSniWithCertificateRequest, options ...operations.Option)) *MockSNIsSDK_CreateSniWithCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.CreateSniWithCertificateRequest
		if args[1] != nil {
			arg1 = args[1].(operations.CreateSniWithCertificateRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockSNIsSDK_CreateSniWithCertificate_Call) Return(createSniWithCertificateResponse *operations.CreateSniWithCertificateResponse, err error) *MockSNIsSDK_CreateSniWithCertificate_Call {
	_c.Call.Return(createSniWithCertificateResponse, err)
	return _c
}

func (_c *MockSNIsSDK_CreateSniWithCertificate_Call) RunAndReturn(run func(context1 context.Context, createSniWithCertificateRequest operations.CreateSniWithCertificateRequest, options ...operations.Option) (*operations.CreateSniWithCertificateResponse, error)) *MockSNIsSDK_CreateSniWithCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSniWithCertificate provides a mock function for the type MockSNIsSDK
func (_mock *MockSNIsSDK) DeleteSniWithCertificate(ctx context.Context, request operations.DeleteSniWithCertificateRequest, opts ...operations.Option) (*operations.DeleteSniWithCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteSniWithCertificate")
	}

	var r0 *operations.DeleteSniWithCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteSniWithCertificateRequest, ...operations.Option) (*operations.DeleteSniWithCertificateResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteSniWithCertificateRequest, ...operations.Option) *operations.DeleteSniWithCertificateResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteSniWithCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.DeleteSniWithCertificateRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSNIsSDK_DeleteSniWithCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSniWithCertificate'
type MockSNIsSDK_DeleteSniWithCertificate_Call struct {
	*mock.Call
}

// DeleteSniWithCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.DeleteSniWithCertificateRequest
//   - opts ...operations.Option
func (_e *MockSNIsSDK_Expecter) DeleteSniWithCertificate(ctx interface{}, request interface{}, opts ...interface{}) *MockSNIsSDK_DeleteSniWithCertificate_Call {
	return &MockSNIsSDK_DeleteSniWithCertificate_Call{Call: _e.mock.On("DeleteSniWithCertificate",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockSNIsSDK_DeleteSniWithCertificate_Call) Run(run func(ctx context.Context, request operations.DeleteSniWithCertificateRequest, opts ...operations.Option)) *MockSNIsSDK_DeleteSniWithCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.DeleteSniWithCertificateRequest
		if args[1] != nil {
			arg1 = args[1].(operations.DeleteSniWithCertificateRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockSNIsSDK_DeleteSniWithCertificate_Call) Return(deleteSniWithCertificateResponse *operations.DeleteSniWithCertificateResponse, err error) *MockSNIsSDK_DeleteSniWithCertificate_Call {
	_c.Call.Return(deleteSniWithCertificateResponse, err)
	return _c
}

func (_c *MockSNIsSDK_DeleteSniWithCertificate_Call) RunAndReturn(run func(ctx context.Context, request operations.DeleteSniWithCertificateRequest, opts ...operations.Option) (*operations.DeleteSniWithCertificateResponse, error)) *MockSNIsSDK_DeleteSniWithCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// GetSniWithCertificate provides a mock function for the type MockSNIsSDK
func (_mock *MockSNIsSDK) GetSniWithCertificate(ctx context.Context, request operations.GetSniWithCertificateRequest, opts ...operations.Option) (*operations.GetSniWithCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetSniWithCertificate")
	}

	var r0 *operations.GetSniWithCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.GetSniWithCertificateRequest, ...operations.Option) (*operations.GetSniWithCertificateResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.GetSniWithCertificateRequest, ...operations.Option) *operations.GetSniWithCertificateResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetSniWithCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.GetSniWithCertificateRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSNIsSDK_GetSniWithCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSniWithCertificate'
type MockSNIsSDK_GetSniWithCertificate_Call struct {
	*mock.Call
}

// GetSniWithCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.GetSniWithCertificateRequest
//   - opts ...operations.Option
func (_e *MockSNIsSDK_Expecter) GetSniWithCertificate(ctx interface{}, request interface{}, opts ...interface{}) *MockSNIsSDK_GetSniWithCertificate_Call {
	return &MockSNIsSDK_GetSniWithCertificate_Call{Call: _e.mock.On("GetSniWithCertificate",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockSNIsSDK_GetSniWithCertificate_Call) Run(run func(ctx context.Context, request operations.GetSniWithCertificateRequest, opts ...operations.Option)) *MockSNIsSDK_GetSniWithCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.GetSniWithCertificateRequest
		if args[1] != nil {
			arg1 = args[1].(operations.GetSniWithCertificateRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockSNIsSDK_GetSniWithCertificate_Call) Return(getSniWithCertificateResponse *operations.GetSniWithCertificateResponse, err error) *MockSNIsSDK_GetSniWithCertificate_Call {
	_c.Call.Return(getSniWithCertificateResponse, err)
	return _c
}

func (_c *MockSNIsSDK_GetSniWithCertificate_Call) RunAndReturn(run func(ctx context.Context, request operations.GetSniWithCertificateRequest, opts ...operations.Option) (*operations.GetSniWithCertificateResponse, error)) *MockSNIsSDK_GetSniWithCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// ListSni provides a mock function for the type MockSNIsSDK
func (_mock *MockSNIsSDK) ListSni(ctx context.Context, request operations.ListSniRequest, opts ...operations.Option) (*operations.ListSniResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListSni")
	}

	var r0 *operations.ListSniResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListSniRequest, ...operations.Option) (*operations.ListSniResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListSniRequest, ...operations.Option) *operations.ListSniResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListSniResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListSniRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSNIsSDK_ListSni_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSni'
type MockSNIsSDK_ListSni_Call struct {
	*mock.Call
}

// ListSni is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.ListSniRequest
//   - opts ...operations.Option
func (_e *MockSNIsSDK_Expecter) ListSni(ctx interface{}, request interface{}, opts ...interface{}) *MockSNIsSDK_ListSni_Call {
	return &MockSNIsSDK_ListSni_Call{Call: _e.mock.On("ListSni",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockSNIsSDK_ListSni_Call) Run(run func(ctx context.Context, request operations.ListSniRequest, opts ...operations.Option)) *MockSNIsSDK_ListSni_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.ListSniRequest
		if args[1] != nil {
			arg1 = args[1].(operations.ListSniRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockSNIsSDK_ListSni_Call) Return(listSniResponse *operations.ListSniResponse, err error) *MockSNIsSDK_ListSni_Call {
	_c.Call.Return(listSniResponse, err)
	return _c
}

func (_c *MockSNIsSDK_ListSni_Call) RunAndReturn(run func(ctx context.Context, request operations.ListSniRequest, opts ...operations.Option) (*operations.ListSniResponse, error)) *MockSNIsSDK_ListSni_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertSniWithCertificate provides a mock function for the type MockSNIsSDK
func (_mock *MockSNIsSDK) UpsertSniWithCertificate(ctx context.Context, request operations.UpsertSniWithCertificateRequest, opts ...operations.Option) (*operations.UpsertSniWithCertificateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertSniWithCertificate")
	}

	var r0 *operations.UpsertSniWithCertificateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertSniWithCertificateRequest, ...operations.Option) (*operations.UpsertSniWithCertificateResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertSniWithCertificateRequest, ...operations.Option) *operations.UpsertSniWithCertificateResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertSniWithCertificateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertSniWithCertificateRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSNIsSDK_UpsertSniWithCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertSniWithCertificate'
type MockSNIsSDK_UpsertSniWithCertificate_Call struct {
	*mock.Call
}

// UpsertSniWithCertificate is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.UpsertSniWithCertificateRequest
//   - opts ...operations.Option
func (_e *MockSNIsSDK_Expecter) UpsertSniWithCertificate(ctx interface{}, request interface{}, opts ...interface{}) *MockSNIsSDK_UpsertSniWithCertificate_Call {
	return &MockSNIsSDK_UpsertSniWithCertificate_Call{Call: _e.mock.On("UpsertSniWithCertificate",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockSNIsSDK_UpsertSniWithCertificate_Call) Run(run func(ctx context.Context, request operations.UpsertSniWithCertificateRequest, opts ...operations.Option)) *MockSNIsSDK_UpsertSniWithCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.UpsertSniWithCertificateRequest
		if args[1] != nil {
			arg1 = args[1].(operations.UpsertSniWithCertificateRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockSNIsSDK_UpsertSniWithCertificate_Call) Return(upsertSniWithCertificateResponse *operations.UpsertSniWithCertificateResponse, err error) *MockSNIsSDK_UpsertSniWithCertificate_Call {
	_c.Call.Return(upsertSniWithCertificateResponse, err)
	return _c
}

func (_c *MockSNIsSDK_UpsertSniWithCertificate_Call) RunAndReturn(run func(ctx context.Context, request operations.UpsertSniWithCertificateRequest, opts ...operations.Option) (*operations.UpsertSniWithCertificateResponse, error)) *MockSNIsSDK_UpsertSniWithCertificate_Call {
	_c.Call.Return(run)
	return _c
}
