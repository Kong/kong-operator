// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sdkmocks

import (
	"context"

	"github.com/Kong/sdk-konnect-go/models/components"
	"github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRoutesSDK creates a new instance of MockRoutesSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRoutesSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRoutesSDK {
	mock := &MockRoutesSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRoutesSDK is an autogenerated mock type for the RoutesSDK type
type MockRoutesSDK struct {
	mock.Mock
}

type MockRoutesSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRoutesSDK) EXPECT() *MockRoutesSDK_Expecter {
	return &MockRoutesSDK_Expecter{mock: &_m.Mock}
}

// CreateRoute provides a mock function for the type MockRoutesSDK
func (_mock *MockRoutesSDK) CreateRoute(ctx context.Context, controlPlaneID string, route components.Route, opts ...operations.Option) (*operations.CreateRouteResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, route, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, route)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateRoute")
	}

	var r0 *operations.CreateRouteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Route, ...operations.Option) (*operations.CreateRouteResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, route, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.Route, ...operations.Option) *operations.CreateRouteResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, route, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateRouteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, components.Route, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, route, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoutesSDK_CreateRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRoute'
type MockRoutesSDK_CreateRoute_Call struct {
	*mock.Call
}

// CreateRoute is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - route components.Route
//   - opts ...operations.Option
func (_e *MockRoutesSDK_Expecter) CreateRoute(ctx interface{}, controlPlaneID interface{}, route interface{}, opts ...interface{}) *MockRoutesSDK_CreateRoute_Call {
	return &MockRoutesSDK_CreateRoute_Call{Call: _e.mock.On("CreateRoute",
		append([]interface{}{ctx, controlPlaneID, route}, opts...)...)}
}

func (_c *MockRoutesSDK_CreateRoute_Call) Run(run func(ctx context.Context, controlPlaneID string, route components.Route, opts ...operations.Option)) *MockRoutesSDK_CreateRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 components.Route
		if args[2] != nil {
			arg2 = args[2].(components.Route)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockRoutesSDK_CreateRoute_Call) Return(createRouteResponse *operations.CreateRouteResponse, err error) *MockRoutesSDK_CreateRoute_Call {
	_c.Call.Return(createRouteResponse, err)
	return _c
}

func (_c *MockRoutesSDK_CreateRoute_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, route components.Route, opts ...operations.Option) (*operations.CreateRouteResponse, error)) *MockRoutesSDK_CreateRoute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRoute provides a mock function for the type MockRoutesSDK
func (_mock *MockRoutesSDK) DeleteRoute(ctx context.Context, controlPlaneID string, routeID string, opts ...operations.Option) (*operations.DeleteRouteResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, controlPlaneID, routeID, opts)
	} else {
		tmpRet = _mock.Called(ctx, controlPlaneID, routeID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoute")
	}

	var r0 *operations.DeleteRouteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.DeleteRouteResponse, error)); ok {
		return returnFunc(ctx, controlPlaneID, routeID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.DeleteRouteResponse); ok {
		r0 = returnFunc(ctx, controlPlaneID, routeID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteRouteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, controlPlaneID, routeID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoutesSDK_DeleteRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRoute'
type MockRoutesSDK_DeleteRoute_Call struct {
	*mock.Call
}

// DeleteRoute is a helper method to define mock.On call
//   - ctx context.Context
//   - controlPlaneID string
//   - routeID string
//   - opts ...operations.Option
func (_e *MockRoutesSDK_Expecter) DeleteRoute(ctx interface{}, controlPlaneID interface{}, routeID interface{}, opts ...interface{}) *MockRoutesSDK_DeleteRoute_Call {
	return &MockRoutesSDK_DeleteRoute_Call{Call: _e.mock.On("DeleteRoute",
		append([]interface{}{ctx, controlPlaneID, routeID}, opts...)...)}
}

func (_c *MockRoutesSDK_DeleteRoute_Call) Run(run func(ctx context.Context, controlPlaneID string, routeID string, opts ...operations.Option)) *MockRoutesSDK_DeleteRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockRoutesSDK_DeleteRoute_Call) Return(deleteRouteResponse *operations.DeleteRouteResponse, err error) *MockRoutesSDK_DeleteRoute_Call {
	_c.Call.Return(deleteRouteResponse, err)
	return _c
}

func (_c *MockRoutesSDK_DeleteRoute_Call) RunAndReturn(run func(ctx context.Context, controlPlaneID string, routeID string, opts ...operations.Option) (*operations.DeleteRouteResponse, error)) *MockRoutesSDK_DeleteRoute_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoute provides a mock function for the type MockRoutesSDK
func (_mock *MockRoutesSDK) GetRoute(ctx context.Context, routeID string, controlPlaneID string, opts ...operations.Option) (*operations.GetRouteResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, routeID, controlPlaneID, opts)
	} else {
		tmpRet = _mock.Called(ctx, routeID, controlPlaneID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetRoute")
	}

	var r0 *operations.GetRouteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) (*operations.GetRouteResponse, error)); ok {
		return returnFunc(ctx, routeID, controlPlaneID, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...operations.Option) *operations.GetRouteResponse); ok {
		r0 = returnFunc(ctx, routeID, controlPlaneID, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetRouteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, routeID, controlPlaneID, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoutesSDK_GetRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoute'
type MockRoutesSDK_GetRoute_Call struct {
	*mock.Call
}

// GetRoute is a helper method to define mock.On call
//   - ctx context.Context
//   - routeID string
//   - controlPlaneID string
//   - opts ...operations.Option
func (_e *MockRoutesSDK_Expecter) GetRoute(ctx interface{}, routeID interface{}, controlPlaneID interface{}, opts ...interface{}) *MockRoutesSDK_GetRoute_Call {
	return &MockRoutesSDK_GetRoute_Call{Call: _e.mock.On("GetRoute",
		append([]interface{}{ctx, routeID, controlPlaneID}, opts...)...)}
}

func (_c *MockRoutesSDK_GetRoute_Call) Run(run func(ctx context.Context, routeID string, controlPlaneID string, opts ...operations.Option)) *MockRoutesSDK_GetRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]operations.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockRoutesSDK_GetRoute_Call) Return(getRouteResponse *operations.GetRouteResponse, err error) *MockRoutesSDK_GetRoute_Call {
	_c.Call.Return(getRouteResponse, err)
	return _c
}

func (_c *MockRoutesSDK_GetRoute_Call) RunAndReturn(run func(ctx context.Context, routeID string, controlPlaneID string, opts ...operations.Option) (*operations.GetRouteResponse, error)) *MockRoutesSDK_GetRoute_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoute provides a mock function for the type MockRoutesSDK
func (_mock *MockRoutesSDK) ListRoute(ctx context.Context, request operations.ListRouteRequest, opts ...operations.Option) (*operations.ListRouteResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListRoute")
	}

	var r0 *operations.ListRouteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListRouteRequest, ...operations.Option) (*operations.ListRouteResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListRouteRequest, ...operations.Option) *operations.ListRouteResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListRouteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListRouteRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoutesSDK_ListRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoute'
type MockRoutesSDK_ListRoute_Call struct {
	*mock.Call
}

// ListRoute is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.ListRouteRequest
//   - opts ...operations.Option
func (_e *MockRoutesSDK_Expecter) ListRoute(ctx interface{}, request interface{}, opts ...interface{}) *MockRoutesSDK_ListRoute_Call {
	return &MockRoutesSDK_ListRoute_Call{Call: _e.mock.On("ListRoute",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockRoutesSDK_ListRoute_Call) Run(run func(ctx context.Context, request operations.ListRouteRequest, opts ...operations.Option)) *MockRoutesSDK_ListRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.ListRouteRequest
		if args[1] != nil {
			arg1 = args[1].(operations.ListRouteRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockRoutesSDK_ListRoute_Call) Return(listRouteResponse *operations.ListRouteResponse, err error) *MockRoutesSDK_ListRoute_Call {
	_c.Call.Return(listRouteResponse, err)
	return _c
}

func (_c *MockRoutesSDK_ListRoute_Call) RunAndReturn(run func(ctx context.Context, request operations.ListRouteRequest, opts ...operations.Option) (*operations.ListRouteResponse, error)) *MockRoutesSDK_ListRoute_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertRoute provides a mock function for the type MockRoutesSDK
func (_mock *MockRoutesSDK) UpsertRoute(ctx context.Context, req operations.UpsertRouteRequest, opts ...operations.Option) (*operations.UpsertRouteResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, req, opts)
	} else {
		tmpRet = _mock.Called(ctx, req)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertRoute")
	}

	var r0 *operations.UpsertRouteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertRouteRequest, ...operations.Option) (*operations.UpsertRouteResponse, error)); ok {
		return returnFunc(ctx, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertRouteRequest, ...operations.Option) *operations.UpsertRouteResponse); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertRouteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertRouteRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRoutesSDK_UpsertRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertRoute'
type MockRoutesSDK_UpsertRoute_Call struct {
	*mock.Call
}

// UpsertRoute is a helper method to define mock.On call
//   - ctx context.Context
//   - req operations.UpsertRouteRequest
//   - opts ...operations.Option
func (_e *MockRoutesSDK_Expecter) UpsertRoute(ctx interface{}, req interface{}, opts ...interface{}) *MockRoutesSDK_UpsertRoute_Call {
	return &MockRoutesSDK_UpsertRoute_Call{Call: _e.mock.On("UpsertRoute",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockRoutesSDK_UpsertRoute_Call) Run(run func(ctx context.Context, req operations.UpsertRouteRequest, opts ...operations.Option)) *MockRoutesSDK_UpsertRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.UpsertRouteRequest
		if args[1] != nil {
			arg1 = args[1].(operations.UpsertRouteRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockRoutesSDK_UpsertRoute_Call) Return(upsertRouteResponse *operations.UpsertRouteResponse, err error) *MockRoutesSDK_UpsertRoute_Call {
	_c.Call.Return(upsertRouteResponse, err)
	return _c
}

func (_c *MockRoutesSDK_UpsertRoute_Call) RunAndReturn(run func(ctx context.Context, req operations.UpsertRouteRequest, opts ...operations.Option) (*operations.UpsertRouteResponse, error)) *MockRoutesSDK_UpsertRoute_Call {
	_c.Call.Return(run)
	return _c
}
