// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sdkmocks

import (
	"context"

	"github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// NewMockKongCredentialBasicAuthSDK creates a new instance of MockKongCredentialBasicAuthSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKongCredentialBasicAuthSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKongCredentialBasicAuthSDK {
	mock := &MockKongCredentialBasicAuthSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKongCredentialBasicAuthSDK is an autogenerated mock type for the KongCredentialBasicAuthSDK type
type MockKongCredentialBasicAuthSDK struct {
	mock.Mock
}

type MockKongCredentialBasicAuthSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKongCredentialBasicAuthSDK) EXPECT() *MockKongCredentialBasicAuthSDK_Expecter {
	return &MockKongCredentialBasicAuthSDK_Expecter{mock: &_m.Mock}
}

// CreateBasicAuthWithConsumer provides a mock function for the type MockKongCredentialBasicAuthSDK
func (_mock *MockKongCredentialBasicAuthSDK) CreateBasicAuthWithConsumer(ctx context.Context, req operations.CreateBasicAuthWithConsumerRequest, opts ...operations.Option) (*operations.CreateBasicAuthWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, req, opts)
	} else {
		tmpRet = _mock.Called(ctx, req)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateBasicAuthWithConsumer")
	}

	var r0 *operations.CreateBasicAuthWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateBasicAuthWithConsumerRequest, ...operations.Option) (*operations.CreateBasicAuthWithConsumerResponse, error)); ok {
		return returnFunc(ctx, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateBasicAuthWithConsumerRequest, ...operations.Option) *operations.CreateBasicAuthWithConsumerResponse); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateBasicAuthWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.CreateBasicAuthWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialBasicAuthSDK_CreateBasicAuthWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBasicAuthWithConsumer'
type MockKongCredentialBasicAuthSDK_CreateBasicAuthWithConsumer_Call struct {
	*mock.Call
}

// CreateBasicAuthWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - req operations.CreateBasicAuthWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialBasicAuthSDK_Expecter) CreateBasicAuthWithConsumer(ctx interface{}, req interface{}, opts ...interface{}) *MockKongCredentialBasicAuthSDK_CreateBasicAuthWithConsumer_Call {
	return &MockKongCredentialBasicAuthSDK_CreateBasicAuthWithConsumer_Call{Call: _e.mock.On("CreateBasicAuthWithConsumer",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockKongCredentialBasicAuthSDK_CreateBasicAuthWithConsumer_Call) Run(run func(ctx context.Context, req operations.CreateBasicAuthWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialBasicAuthSDK_CreateBasicAuthWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.CreateBasicAuthWithConsumerRequest
		if args[1] != nil {
			arg1 = args[1].(operations.CreateBasicAuthWithConsumerRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKongCredentialBasicAuthSDK_CreateBasicAuthWithConsumer_Call) Return(createBasicAuthWithConsumerResponse *operations.CreateBasicAuthWithConsumerResponse, err error) *MockKongCredentialBasicAuthSDK_CreateBasicAuthWithConsumer_Call {
	_c.Call.Return(createBasicAuthWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialBasicAuthSDK_CreateBasicAuthWithConsumer_Call) RunAndReturn(run func(ctx context.Context, req operations.CreateBasicAuthWithConsumerRequest, opts ...operations.Option) (*operations.CreateBasicAuthWithConsumerResponse, error)) *MockKongCredentialBasicAuthSDK_CreateBasicAuthWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBasicAuthWithConsumer provides a mock function for the type MockKongCredentialBasicAuthSDK
func (_mock *MockKongCredentialBasicAuthSDK) DeleteBasicAuthWithConsumer(ctx context.Context, request operations.DeleteBasicAuthWithConsumerRequest, opts ...operations.Option) (*operations.DeleteBasicAuthWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteBasicAuthWithConsumer")
	}

	var r0 *operations.DeleteBasicAuthWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteBasicAuthWithConsumerRequest, ...operations.Option) (*operations.DeleteBasicAuthWithConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteBasicAuthWithConsumerRequest, ...operations.Option) *operations.DeleteBasicAuthWithConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteBasicAuthWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.DeleteBasicAuthWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialBasicAuthSDK_DeleteBasicAuthWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBasicAuthWithConsumer'
type MockKongCredentialBasicAuthSDK_DeleteBasicAuthWithConsumer_Call struct {
	*mock.Call
}

// DeleteBasicAuthWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.DeleteBasicAuthWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialBasicAuthSDK_Expecter) DeleteBasicAuthWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialBasicAuthSDK_DeleteBasicAuthWithConsumer_Call {
	return &MockKongCredentialBasicAuthSDK_DeleteBasicAuthWithConsumer_Call{Call: _e.mock.On("DeleteBasicAuthWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialBasicAuthSDK_DeleteBasicAuthWithConsumer_Call) Run(run func(ctx context.Context, request operations.DeleteBasicAuthWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialBasicAuthSDK_DeleteBasicAuthWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.DeleteBasicAuthWithConsumerRequest
		if args[1] != nil {
			arg1 = args[1].(operations.DeleteBasicAuthWithConsumerRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKongCredentialBasicAuthSDK_DeleteBasicAuthWithConsumer_Call) Return(deleteBasicAuthWithConsumerResponse *operations.DeleteBasicAuthWithConsumerResponse, err error) *MockKongCredentialBasicAuthSDK_DeleteBasicAuthWithConsumer_Call {
	_c.Call.Return(deleteBasicAuthWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialBasicAuthSDK_DeleteBasicAuthWithConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.DeleteBasicAuthWithConsumerRequest, opts ...operations.Option) (*operations.DeleteBasicAuthWithConsumerResponse, error)) *MockKongCredentialBasicAuthSDK_DeleteBasicAuthWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// ListBasicAuth provides a mock function for the type MockKongCredentialBasicAuthSDK
func (_mock *MockKongCredentialBasicAuthSDK) ListBasicAuth(ctx context.Context, request operations.ListBasicAuthRequest, opts ...operations.Option) (*operations.ListBasicAuthResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListBasicAuth")
	}

	var r0 *operations.ListBasicAuthResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListBasicAuthRequest, ...operations.Option) (*operations.ListBasicAuthResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListBasicAuthRequest, ...operations.Option) *operations.ListBasicAuthResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListBasicAuthResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListBasicAuthRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialBasicAuthSDK_ListBasicAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBasicAuth'
type MockKongCredentialBasicAuthSDK_ListBasicAuth_Call struct {
	*mock.Call
}

// ListBasicAuth is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.ListBasicAuthRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialBasicAuthSDK_Expecter) ListBasicAuth(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialBasicAuthSDK_ListBasicAuth_Call {
	return &MockKongCredentialBasicAuthSDK_ListBasicAuth_Call{Call: _e.mock.On("ListBasicAuth",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialBasicAuthSDK_ListBasicAuth_Call) Run(run func(ctx context.Context, request operations.ListBasicAuthRequest, opts ...operations.Option)) *MockKongCredentialBasicAuthSDK_ListBasicAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.ListBasicAuthRequest
		if args[1] != nil {
			arg1 = args[1].(operations.ListBasicAuthRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKongCredentialBasicAuthSDK_ListBasicAuth_Call) Return(listBasicAuthResponse *operations.ListBasicAuthResponse, err error) *MockKongCredentialBasicAuthSDK_ListBasicAuth_Call {
	_c.Call.Return(listBasicAuthResponse, err)
	return _c
}

func (_c *MockKongCredentialBasicAuthSDK_ListBasicAuth_Call) RunAndReturn(run func(ctx context.Context, request operations.ListBasicAuthRequest, opts ...operations.Option) (*operations.ListBasicAuthResponse, error)) *MockKongCredentialBasicAuthSDK_ListBasicAuth_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertBasicAuthWithConsumer provides a mock function for the type MockKongCredentialBasicAuthSDK
func (_mock *MockKongCredentialBasicAuthSDK) UpsertBasicAuthWithConsumer(ctx context.Context, request operations.UpsertBasicAuthWithConsumerRequest, opts ...operations.Option) (*operations.UpsertBasicAuthWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertBasicAuthWithConsumer")
	}

	var r0 *operations.UpsertBasicAuthWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertBasicAuthWithConsumerRequest, ...operations.Option) (*operations.UpsertBasicAuthWithConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertBasicAuthWithConsumerRequest, ...operations.Option) *operations.UpsertBasicAuthWithConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertBasicAuthWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertBasicAuthWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialBasicAuthSDK_UpsertBasicAuthWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertBasicAuthWithConsumer'
type MockKongCredentialBasicAuthSDK_UpsertBasicAuthWithConsumer_Call struct {
	*mock.Call
}

// UpsertBasicAuthWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.UpsertBasicAuthWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialBasicAuthSDK_Expecter) UpsertBasicAuthWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialBasicAuthSDK_UpsertBasicAuthWithConsumer_Call {
	return &MockKongCredentialBasicAuthSDK_UpsertBasicAuthWithConsumer_Call{Call: _e.mock.On("UpsertBasicAuthWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialBasicAuthSDK_UpsertBasicAuthWithConsumer_Call) Run(run func(ctx context.Context, request operations.UpsertBasicAuthWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialBasicAuthSDK_UpsertBasicAuthWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.UpsertBasicAuthWithConsumerRequest
		if args[1] != nil {
			arg1 = args[1].(operations.UpsertBasicAuthWithConsumerRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKongCredentialBasicAuthSDK_UpsertBasicAuthWithConsumer_Call) Return(upsertBasicAuthWithConsumerResponse *operations.UpsertBasicAuthWithConsumerResponse, err error) *MockKongCredentialBasicAuthSDK_UpsertBasicAuthWithConsumer_Call {
	_c.Call.Return(upsertBasicAuthWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialBasicAuthSDK_UpsertBasicAuthWithConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.UpsertBasicAuthWithConsumerRequest, opts ...operations.Option) (*operations.UpsertBasicAuthWithConsumerResponse, error)) *MockKongCredentialBasicAuthSDK_UpsertBasicAuthWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// GetBasicAuthWithConsumer provides a mock function for the type MockKongCredentialBasicAuthSDK
func (_mock *MockKongCredentialBasicAuthSDK) GetBasicAuthWithConsumer(ctx context.Context, request operations.GetBasicAuthWithConsumerRequest, opts ...operations.Option) (*operations.GetBasicAuthWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetBasicAuthWithConsumer")
	}

	var r0 *operations.GetBasicAuthWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.GetBasicAuthWithConsumerRequest, ...operations.Option) (*operations.GetBasicAuthWithConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.GetBasicAuthWithConsumerRequest, ...operations.Option) *operations.GetBasicAuthWithConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetBasicAuthWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.GetBasicAuthWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialBasicAuthSDK_GetBasicAuthWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBasicAuthWithConsumer'
type MockKongCredentialBasicAuthSDK_GetBasicAuthWithConsumer_Call struct {
	*mock.Call
}

// GetBasicAuthWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.GetBasicAuthWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialBasicAuthSDK_Expecter) GetBasicAuthWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialBasicAuthSDK_GetBasicAuthWithConsumer_Call {
	return &MockKongCredentialBasicAuthSDK_GetBasicAuthWithConsumer_Call{Call: _e.mock.On("GetBasicAuthWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialBasicAuthSDK_GetBasicAuthWithConsumer_Call) Run(run func(ctx context.Context, request operations.GetBasicAuthWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialBasicAuthSDK_GetBasicAuthWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.GetBasicAuthWithConsumerRequest
		if args[1] != nil {
			arg1 = args[1].(operations.GetBasicAuthWithConsumerRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKongCredentialBasicAuthSDK_GetBasicAuthWithConsumer_Call) Return(getBasicAuthWithConsumerResponse *operations.GetBasicAuthWithConsumerResponse, err error) *MockKongCredentialBasicAuthSDK_GetBasicAuthWithConsumer_Call {
	_c.Call.Return(getBasicAuthWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialBasicAuthSDK_GetBasicAuthWithConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.GetBasicAuthWithConsumerRequest, opts ...operations.Option) (*operations.GetBasicAuthWithConsumerResponse, error)) *MockKongCredentialBasicAuthSDK_GetBasicAuthWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}
