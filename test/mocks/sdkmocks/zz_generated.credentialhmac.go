// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sdkmocks

import (
	"context"

	"github.com/Kong/sdk-konnect-go/models/operations"
	mock "github.com/stretchr/testify/mock"
)

// NewMockKongCredentialHMACSDK creates a new instance of MockKongCredentialHMACSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKongCredentialHMACSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKongCredentialHMACSDK {
	mock := &MockKongCredentialHMACSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockKongCredentialHMACSDK is an autogenerated mock type for the KongCredentialHMACSDK type
type MockKongCredentialHMACSDK struct {
	mock.Mock
}

type MockKongCredentialHMACSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKongCredentialHMACSDK) EXPECT() *MockKongCredentialHMACSDK_Expecter {
	return &MockKongCredentialHMACSDK_Expecter{mock: &_m.Mock}
}

// CreateHmacAuthWithConsumer provides a mock function for the type MockKongCredentialHMACSDK
func (_mock *MockKongCredentialHMACSDK) CreateHmacAuthWithConsumer(ctx context.Context, req operations.CreateHmacAuthWithConsumerRequest, opts ...operations.Option) (*operations.CreateHmacAuthWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, req, opts)
	} else {
		tmpRet = _mock.Called(ctx, req)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateHmacAuthWithConsumer")
	}

	var r0 *operations.CreateHmacAuthWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateHmacAuthWithConsumerRequest, ...operations.Option) (*operations.CreateHmacAuthWithConsumerResponse, error)); ok {
		return returnFunc(ctx, req, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.CreateHmacAuthWithConsumerRequest, ...operations.Option) *operations.CreateHmacAuthWithConsumerResponse); ok {
		r0 = returnFunc(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.CreateHmacAuthWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.CreateHmacAuthWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialHMACSDK_CreateHmacAuthWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateHmacAuthWithConsumer'
type MockKongCredentialHMACSDK_CreateHmacAuthWithConsumer_Call struct {
	*mock.Call
}

// CreateHmacAuthWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - req operations.CreateHmacAuthWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialHMACSDK_Expecter) CreateHmacAuthWithConsumer(ctx interface{}, req interface{}, opts ...interface{}) *MockKongCredentialHMACSDK_CreateHmacAuthWithConsumer_Call {
	return &MockKongCredentialHMACSDK_CreateHmacAuthWithConsumer_Call{Call: _e.mock.On("CreateHmacAuthWithConsumer",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockKongCredentialHMACSDK_CreateHmacAuthWithConsumer_Call) Run(run func(ctx context.Context, req operations.CreateHmacAuthWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialHMACSDK_CreateHmacAuthWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.CreateHmacAuthWithConsumerRequest
		if args[1] != nil {
			arg1 = args[1].(operations.CreateHmacAuthWithConsumerRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKongCredentialHMACSDK_CreateHmacAuthWithConsumer_Call) Return(createHmacAuthWithConsumerResponse *operations.CreateHmacAuthWithConsumerResponse, err error) *MockKongCredentialHMACSDK_CreateHmacAuthWithConsumer_Call {
	_c.Call.Return(createHmacAuthWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialHMACSDK_CreateHmacAuthWithConsumer_Call) RunAndReturn(run func(ctx context.Context, req operations.CreateHmacAuthWithConsumerRequest, opts ...operations.Option) (*operations.CreateHmacAuthWithConsumerResponse, error)) *MockKongCredentialHMACSDK_CreateHmacAuthWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteHmacAuthWithConsumer provides a mock function for the type MockKongCredentialHMACSDK
func (_mock *MockKongCredentialHMACSDK) DeleteHmacAuthWithConsumer(ctx context.Context, request operations.DeleteHmacAuthWithConsumerRequest, opts ...operations.Option) (*operations.DeleteHmacAuthWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteHmacAuthWithConsumer")
	}

	var r0 *operations.DeleteHmacAuthWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteHmacAuthWithConsumerRequest, ...operations.Option) (*operations.DeleteHmacAuthWithConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.DeleteHmacAuthWithConsumerRequest, ...operations.Option) *operations.DeleteHmacAuthWithConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.DeleteHmacAuthWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.DeleteHmacAuthWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialHMACSDK_DeleteHmacAuthWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteHmacAuthWithConsumer'
type MockKongCredentialHMACSDK_DeleteHmacAuthWithConsumer_Call struct {
	*mock.Call
}

// DeleteHmacAuthWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.DeleteHmacAuthWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialHMACSDK_Expecter) DeleteHmacAuthWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialHMACSDK_DeleteHmacAuthWithConsumer_Call {
	return &MockKongCredentialHMACSDK_DeleteHmacAuthWithConsumer_Call{Call: _e.mock.On("DeleteHmacAuthWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialHMACSDK_DeleteHmacAuthWithConsumer_Call) Run(run func(ctx context.Context, request operations.DeleteHmacAuthWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialHMACSDK_DeleteHmacAuthWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.DeleteHmacAuthWithConsumerRequest
		if args[1] != nil {
			arg1 = args[1].(operations.DeleteHmacAuthWithConsumerRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKongCredentialHMACSDK_DeleteHmacAuthWithConsumer_Call) Return(deleteHmacAuthWithConsumerResponse *operations.DeleteHmacAuthWithConsumerResponse, err error) *MockKongCredentialHMACSDK_DeleteHmacAuthWithConsumer_Call {
	_c.Call.Return(deleteHmacAuthWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialHMACSDK_DeleteHmacAuthWithConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.DeleteHmacAuthWithConsumerRequest, opts ...operations.Option) (*operations.DeleteHmacAuthWithConsumerResponse, error)) *MockKongCredentialHMACSDK_DeleteHmacAuthWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// GetHmacAuthWithConsumer provides a mock function for the type MockKongCredentialHMACSDK
func (_mock *MockKongCredentialHMACSDK) GetHmacAuthWithConsumer(ctx context.Context, request operations.GetHmacAuthWithConsumerRequest, opts ...operations.Option) (*operations.GetHmacAuthWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetHmacAuthWithConsumer")
	}

	var r0 *operations.GetHmacAuthWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.GetHmacAuthWithConsumerRequest, ...operations.Option) (*operations.GetHmacAuthWithConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.GetHmacAuthWithConsumerRequest, ...operations.Option) *operations.GetHmacAuthWithConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetHmacAuthWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.GetHmacAuthWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialHMACSDK_GetHmacAuthWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHmacAuthWithConsumer'
type MockKongCredentialHMACSDK_GetHmacAuthWithConsumer_Call struct {
	*mock.Call
}

// GetHmacAuthWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.GetHmacAuthWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialHMACSDK_Expecter) GetHmacAuthWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialHMACSDK_GetHmacAuthWithConsumer_Call {
	return &MockKongCredentialHMACSDK_GetHmacAuthWithConsumer_Call{Call: _e.mock.On("GetHmacAuthWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialHMACSDK_GetHmacAuthWithConsumer_Call) Run(run func(ctx context.Context, request operations.GetHmacAuthWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialHMACSDK_GetHmacAuthWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.GetHmacAuthWithConsumerRequest
		if args[1] != nil {
			arg1 = args[1].(operations.GetHmacAuthWithConsumerRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKongCredentialHMACSDK_GetHmacAuthWithConsumer_Call) Return(getHmacAuthWithConsumerResponse *operations.GetHmacAuthWithConsumerResponse, err error) *MockKongCredentialHMACSDK_GetHmacAuthWithConsumer_Call {
	_c.Call.Return(getHmacAuthWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialHMACSDK_GetHmacAuthWithConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.GetHmacAuthWithConsumerRequest, opts ...operations.Option) (*operations.GetHmacAuthWithConsumerResponse, error)) *MockKongCredentialHMACSDK_GetHmacAuthWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// ListHmacAuth provides a mock function for the type MockKongCredentialHMACSDK
func (_mock *MockKongCredentialHMACSDK) ListHmacAuth(ctx context.Context, request operations.ListHmacAuthRequest, opts ...operations.Option) (*operations.ListHmacAuthResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListHmacAuth")
	}

	var r0 *operations.ListHmacAuthResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListHmacAuthRequest, ...operations.Option) (*operations.ListHmacAuthResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.ListHmacAuthRequest, ...operations.Option) *operations.ListHmacAuthResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListHmacAuthResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.ListHmacAuthRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialHMACSDK_ListHmacAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListHmacAuth'
type MockKongCredentialHMACSDK_ListHmacAuth_Call struct {
	*mock.Call
}

// ListHmacAuth is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.ListHmacAuthRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialHMACSDK_Expecter) ListHmacAuth(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialHMACSDK_ListHmacAuth_Call {
	return &MockKongCredentialHMACSDK_ListHmacAuth_Call{Call: _e.mock.On("ListHmacAuth",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialHMACSDK_ListHmacAuth_Call) Run(run func(ctx context.Context, request operations.ListHmacAuthRequest, opts ...operations.Option)) *MockKongCredentialHMACSDK_ListHmacAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.ListHmacAuthRequest
		if args[1] != nil {
			arg1 = args[1].(operations.ListHmacAuthRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKongCredentialHMACSDK_ListHmacAuth_Call) Return(listHmacAuthResponse *operations.ListHmacAuthResponse, err error) *MockKongCredentialHMACSDK_ListHmacAuth_Call {
	_c.Call.Return(listHmacAuthResponse, err)
	return _c
}

func (_c *MockKongCredentialHMACSDK_ListHmacAuth_Call) RunAndReturn(run func(ctx context.Context, request operations.ListHmacAuthRequest, opts ...operations.Option) (*operations.ListHmacAuthResponse, error)) *MockKongCredentialHMACSDK_ListHmacAuth_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertHmacAuthWithConsumer provides a mock function for the type MockKongCredentialHMACSDK
func (_mock *MockKongCredentialHMACSDK) UpsertHmacAuthWithConsumer(ctx context.Context, request operations.UpsertHmacAuthWithConsumerRequest, opts ...operations.Option) (*operations.UpsertHmacAuthWithConsumerResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, request, opts)
	} else {
		tmpRet = _mock.Called(ctx, request)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpsertHmacAuthWithConsumer")
	}

	var r0 *operations.UpsertHmacAuthWithConsumerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertHmacAuthWithConsumerRequest, ...operations.Option) (*operations.UpsertHmacAuthWithConsumerResponse, error)); ok {
		return returnFunc(ctx, request, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, operations.UpsertHmacAuthWithConsumerRequest, ...operations.Option) *operations.UpsertHmacAuthWithConsumerResponse); ok {
		r0 = returnFunc(ctx, request, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.UpsertHmacAuthWithConsumerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, operations.UpsertHmacAuthWithConsumerRequest, ...operations.Option) error); ok {
		r1 = returnFunc(ctx, request, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockKongCredentialHMACSDK_UpsertHmacAuthWithConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertHmacAuthWithConsumer'
type MockKongCredentialHMACSDK_UpsertHmacAuthWithConsumer_Call struct {
	*mock.Call
}

// UpsertHmacAuthWithConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - request operations.UpsertHmacAuthWithConsumerRequest
//   - opts ...operations.Option
func (_e *MockKongCredentialHMACSDK_Expecter) UpsertHmacAuthWithConsumer(ctx interface{}, request interface{}, opts ...interface{}) *MockKongCredentialHMACSDK_UpsertHmacAuthWithConsumer_Call {
	return &MockKongCredentialHMACSDK_UpsertHmacAuthWithConsumer_Call{Call: _e.mock.On("UpsertHmacAuthWithConsumer",
		append([]interface{}{ctx, request}, opts...)...)}
}

func (_c *MockKongCredentialHMACSDK_UpsertHmacAuthWithConsumer_Call) Run(run func(ctx context.Context, request operations.UpsertHmacAuthWithConsumerRequest, opts ...operations.Option)) *MockKongCredentialHMACSDK_UpsertHmacAuthWithConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 operations.UpsertHmacAuthWithConsumerRequest
		if args[1] != nil {
			arg1 = args[1].(operations.UpsertHmacAuthWithConsumerRequest)
		}
		var arg2 []operations.Option
		var variadicArgs []operations.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]operations.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockKongCredentialHMACSDK_UpsertHmacAuthWithConsumer_Call) Return(upsertHmacAuthWithConsumerResponse *operations.UpsertHmacAuthWithConsumerResponse, err error) *MockKongCredentialHMACSDK_UpsertHmacAuthWithConsumer_Call {
	_c.Call.Return(upsertHmacAuthWithConsumerResponse, err)
	return _c
}

func (_c *MockKongCredentialHMACSDK_UpsertHmacAuthWithConsumer_Call) RunAndReturn(run func(ctx context.Context, request operations.UpsertHmacAuthWithConsumerRequest, opts ...operations.Option) (*operations.UpsertHmacAuthWithConsumerResponse, error)) *MockKongCredentialHMACSDK_UpsertHmacAuthWithConsumer_Call {
	_c.Call.Return(run)
	return _c
}
